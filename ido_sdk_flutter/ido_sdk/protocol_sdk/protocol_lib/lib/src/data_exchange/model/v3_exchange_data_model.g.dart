// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'v3_exchange_model.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

IDOV3ExchangeModel _$V3ExchangeModelFromJson(Map<String, dynamic> json) =>
    IDOV3ExchangeModel(
      year: json['year'] as int?,
      month: json['month'] as int?,
      day: json['day'] as int?,
      hour: json['hour'] as int?,
      minute: json['minute'] as int?,
      second: json['second'] as int?,
      sportType: json['sportType'] as int?,
      planType: json['planType'] as int?,
      actionType: json['actionType'] as int?,
      version: json['version'] as int?,
      operate: json['operate'] as int?,
      targetValue: json['targetValue'] as int?,
      targetType: json['targetType'] as int?,
      forceStart: json['forceStart'] as int?,
      retCode: json['retCode'] as int?,
      calories: json['calories'] as int?,
      distance: json['distance'] as int?,
      durations: json['durations'] as int?,
      step: json['step'] as int?,
      swimPosture: json['swimPosture'] as int?,
      status: json['status'] as int?,
      signalFlag: json['signalFlag'] as int?,
      isSave: json['isSave'] as bool?,
      realTimeSpeed: json['realTimeSpeed'] as int?,
      realTimePace: json['realTimePace'] as int?,
      interval: json['interval'] as int?,
      hrCount: json['hrCount'] as int?,
      burnFatMins: json['burnFatMins'] as int?,
      aerobicMins: json['aerobicMins'] as int?,
      limitMins: json['limitMins'] as int?,
      hrValues:
          (json['hrValues'] as List<dynamic>?)?.map((e) => e as int).toList(),
      warmUpSecond: json['warmUpSecond'] as int?,
      anaeroicSecond: json['anaeroicSecond'] as int?,
      fatBurnSecond: json['fatBurnSecond'] as int?,
      aerobicSecond: json['aerobicSecond'] as int?,
      limitSecond: json['limitSecond'] as int?,
      avgHr: json['avgHr'] as int?,
      maxHr: json['maxHr'] as int?,
      curHr: json['curHr'] as int?,
      warmUpValue: json['warmUpValue'] as int?,
      fatBurnValue: json['fatBurnValue'] as int?,
      aerobicValue: json['aerobicValue'] as int?,
      limitValue: json['limitValue'] as int?,
      anaerobicValue: json['anaerobicValue'] as int?,
      avgSpeed: json['avgSpeed'] as int?,
      maxSpeed: json['maxSpeed'] as int?,
      avgStepFrequency: json['avgStepFrequency'] as int?,
      maxStepFrequency: json['maxStepFrequency'] as int?,
      avgStepStride: json['avgStepStride'] as int?,
      maxStepStride: json['maxStepStride'] as int?,
      kmSpeed: json['kmSpeed'] as int?,
      fastKmSpeed: json['fastKmSpeed'] as int?,
      kmSpeedCount: json['kmSpeedCount'] as int?,
      kmSpeeds:
          (json['kmSpeeds'] as List<dynamic>?)?.map((e) => e as int).toList(),
      mileCount: json['mileCount'] as int?,
      mileSpeeds:
          (json['mileSpeeds'] as List<dynamic>?)?.map((e) => e as int).toList(),
      stepsFrequencyCount: json['stepsFrequencyCount'] as int?,
      stepsFrequencys: (json['stepsFrequencys'] as List<dynamic>?)
          ?.map((e) => e as int)
          .toList(),
      trainingEffect: json['trainingEffect'] as int?,
      anaerobicTrainingEffect: json['anaerobicTrainingEffect'] as int?,
      vo2Max: json['vo2Max'] as int?,
      actionDataCount: json['actionDataCount'] as int?,
      inClassCalories: json['inClassCalories'] as int?,
      completionRate: json['completionRate'] as int?,
      hrCompletionRate: json['hrCompletionRate'] as int?,
      recoverTime: json['recoverTime'] as int?,
      avgWeekActivityTime: json['avgWeekActivityTime'] as int?,
      grade: json['grade'] as int?,
      actionData: (json['actionData'] as List<dynamic>?)
          ?.map((e) => e as Map<String, dynamic>)
          .toList(),
      trainingOffset: json['trainingOffset'] as int?,
      countHour: json['countHour'] as int?,
      countMinute: json['countMinute'] as int?,
      countSecond: json['countSecond'] as int?,
      time: json['time'] as int?,
      lowHeart: json['lowHeart'] as int?,
      heightHeart: json['heightHeart'] as int?,
      paceSpeedCount: json['paceSpeedCount'] as int?,
      paceSpeeds:
          (json['paceSpeeds'] as List<dynamic>?)?.map((e) => e as int).toList(),
      realSpeedCount: json['realSpeedCount'] as int?,
      realSpeeds:
          (json['realSpeeds'] as List<dynamic>?)?.map((e) => e as int).toList(),
      intervalSecond: json['intervalSecond'] as int?,
      gpsCount: json['gpsCount'] as int?,
      gpsData: (json['gpsData'] as List<dynamic>?)
          ?.map((e) => e as Map<String, dynamic>)
          .toList(),
        segmentItemNum: json['segmentItemNum'] as int?,
        segmentTotalTime: json['segmentTotalTime'] as int?,
        segmentTotalDistance: json['segmentTotalDistance'] as int?,
        segmentTotalPace: json['segmentTotalPace'] as int?,
        segmentTotalAvgHr: json['segmentTotalAvgHr'] as int?,
        segmentTotalAvgStepFrequency: json['segmentTotalAvgStepFrequency'] as int?,
        paceHiit: json['paceHiit'] as int?,
        paceAnaerobic: json['paceAnaerobic'] as int?,
        paceLacticAcidThreshold: json['paceLacticAcidThreshold'] as int?,
        paceMarathon: json['paceMarathon'] as int?,
        paceEasyRun: json['paceEasyRun'] as int?,
        segmentItems: (json['segmentItems'] as List<dynamic>?)
            ?.map((e) => e as Map<String, dynamic>)
            .toList(),
    );

Map<String, dynamic> _$V3ExchangeModelToJson(IDOV3ExchangeModel instance) =>
    <String, dynamic>{
      'year': instance.year,
      'month': instance.month,
      'day': instance.day,
      'hour': instance.hour,
      'minute': instance.minute,
      'second': instance.second,
      'sportType': instance.sportType,
      'planType': instance.planType,
      'actionType': instance.actionType,
      'version': instance.version,
      'operate': instance.operate,
      'targetValue': instance.targetValue,
      'targetType': instance.targetType,
      'forceStart': instance.forceStart,
      'retCode': instance.retCode,
      'calories': instance.calories,
      'distance': instance.distance,
      'durations': instance.durations,
      'step': instance.step,
      'swimPosture': instance.swimPosture,
      'status': instance.status,
      'signalFlag': instance.signalFlag,
      'isSave': instance.isSave,
      'realTimeSpeed': instance.realTimeSpeed,
      'realTimePace': instance.realTimePace,
      'interval': instance.interval,
      'hrCount': instance.hrCount,
      'burnFatMins': instance.burnFatMins,
      'aerobicMins': instance.aerobicMins,
      'limitMins': instance.limitMins,
      'hrValues': instance.hrValues,
      'warmUpSecond': instance.warmUpSecond,
      'anaeroicSecond': instance.anaeroicSecond,
      'fatBurnSecond': instance.fatBurnSecond,
      'aerobicSecond': instance.aerobicSecond,
      'limitSecond': instance.limitSecond,
      'avgHr': instance.avgHr,
      'maxHr': instance.maxHr,
      'curHr': instance.curHr,
      'warmUpValue': instance.warmUpValue,
      'fatBurnValue': instance.fatBurnValue,
      'aerobicValue': instance.aerobicValue,
      'limitValue': instance.limitValue,
      'anaerobicValue': instance.anaerobicValue,
      'avgSpeed': instance.avgSpeed,
      'maxSpeed': instance.maxSpeed,
      'avgStepFrequency': instance.avgStepFrequency,
      'maxStepFrequency': instance.maxStepFrequency,
      'avgStepStride': instance.avgStepStride,
      'maxStepStride': instance.maxStepStride,
      'kmSpeed': instance.kmSpeed,
      'fastKmSpeed': instance.fastKmSpeed,
      'kmSpeedCount': instance.kmSpeedCount,
      'kmSpeeds': instance.kmSpeeds,
      'mileCount': instance.mileCount,
      'mileSpeeds': instance.mileSpeeds,
      'stepsFrequencyCount': instance.stepsFrequencyCount,
      'stepsFrequencys': instance.stepsFrequencys,
      'trainingEffect': instance.trainingEffect,
      'anaerobicTrainingEffect': instance.anaerobicTrainingEffect,
      'vo2Max': instance.vo2Max,
      'actionDataCount': instance.actionDataCount,
      'inClassCalories': instance.inClassCalories,
      'completionRate': instance.completionRate,
      'hrCompletionRate': instance.hrCompletionRate,
      'recoverTime': instance.recoverTime,
      'avgWeekActivityTime': instance.avgWeekActivityTime,
      'grade': instance.grade,
      'actionData': instance.actionData,
      'trainingOffset': instance.trainingOffset,
      'countHour': instance.countHour,
      'countMinute': instance.countMinute,
      'countSecond': instance.countSecond,
      'time': instance.time,
      'lowHeart': instance.lowHeart,
      'heightHeart': instance.heightHeart,
      'paceSpeedCount': instance.paceSpeedCount,
      'paceSpeeds': instance.paceSpeeds,
      'realSpeedCount': instance.realSpeedCount,
      'realSpeeds': instance.realSpeeds,
      'intervalSecond': instance.intervalSecond,
      'gpsCount': instance.gpsCount,
      'gpsData': instance.gpsData,
      'segmentItemNum': instance.segmentItemNum,
      'segmentTotalTime': instance.segmentTotalTime,
      'segmentTotalDistance': instance.segmentTotalDistance,
      'segmentTotalPace': instance.segmentTotalPace,
      'segmentTotalAvgHr': instance.segmentTotalAvgHr,
      'segmentTotalAvgStepFrequency': instance.segmentTotalAvgStepFrequency,
      'paceHiit': instance.paceHiit,
      'paceAnaerobic': instance.paceAnaerobic,
      'paceLacticAcidThreshold': instance.paceLacticAcidThreshold,
      'paceMarathon': instance.paceMarathon,
      'paceEasyRun': instance.paceEasyRun,
      'segmentItems': instance.segmentItems
    };
