// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "Sifli.g.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

@implementation IDOSFBoardTypeBox
- (instancetype)initWithValue:(IDOSFBoardType)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation OTAUpdateStateBox
- (instancetype)initWithValue:(OTAUpdateState)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

NSObject<FlutterMessageCodec> *ApiSifliHostGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

void ApiSifliHostSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<ApiSifliHost> *api) {
  ///开始进行升级
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.native_channel.ApiSifliHost.startOTA"
        binaryMessenger:binaryMessenger
        codec:ApiSifliHostGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startOTAFiles:deviceUUID:error:)], @"ApiSifliHost api (%@) doesn't respond to @selector(startOTAFiles:deviceUUID:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSArray *arg_files = GetNullableObjectAtIndex(args, 0);
        NSString *arg_deviceUUID = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api startOTAFiles:arg_files deviceUUID:arg_deviceUUID error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.native_channel.ApiSifliHost.startOTANor"
        binaryMessenger:binaryMessenger
        codec:ApiSifliHostGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startOTANorFiles:deviceUUID:platform:isIndfu:error:)], @"ApiSifliHost api (%@) doesn't respond to @selector(startOTANorFiles:deviceUUID:platform:isIndfu:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSArray *arg_files = GetNullableObjectAtIndex(args, 0);
        NSString *arg_deviceUUID = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_platform = GetNullableObjectAtIndex(args, 2);
        NSNumber *arg_isIndfu = GetNullableObjectAtIndex(args, 3);
        FlutterError *error;
        [api startOTANorFiles:arg_files deviceUUID:arg_deviceUUID platform:arg_platform isIndfu:arg_isIndfu error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 停止升级
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.native_channel.ApiSifliHost.stop"
        binaryMessenger:binaryMessenger
        codec:ApiSifliHostGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(stopWithError:)], @"ApiSifliHost api (%@) doesn't respond to @selector(stopWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api stopWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// 将png格式文件序列转为ezipBin类型。转换失败返回nil。V2.2
  /// pngDatas png文件数据序列数组 （如果数组是多张图片，则会几张图片组合拼接成一张图片）
  /// eColor 颜色字符串 color type as below: rgb565, rgb565A, rbg888, rgb888A
  /// eType eizp类型 0 keep original alpha channel;1 no alpha chanel
  /// binType bin类型 0 to support rotation; 1 for no rotation
  /// boardType 主板芯片类型 @See SFBoardType 0:55x 1:56x  2:52x
  /// @return ezip or apng result, nil for fail
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.native_channel.ApiSifliHost.sifliEBinFromPng"
        binaryMessenger:binaryMessenger
        codec:ApiSifliHostGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(sifliEBinFromPngPngDatas:eColor:type:binType:boardType:error:)], @"ApiSifliHost api (%@) doesn't respond to @selector(sifliEBinFromPngPngDatas:eColor:type:binType:boardType:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_pngDatas = GetNullableObjectAtIndex(args, 0);
        NSString *arg_eColor = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_type = GetNullableObjectAtIndex(args, 2);
        NSNumber *arg_binType = GetNullableObjectAtIndex(args, 3);
        IDOSFBoardType arg_boardType = [GetNullableObjectAtIndex(args, 4) integerValue];
        FlutterError *error;
        FlutterStandardTypedData *output = [api sifliEBinFromPngPngDatas:arg_pngDatas eColor:arg_eColor type:arg_type binType:arg_binType boardType:arg_boardType error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
NSObject<FlutterMessageCodec> *ApiSifliFlutterGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

@interface ApiSifliFlutter ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation ApiSifliFlutter

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)updateManageStateState:(OTAUpdateState)arg_state desc:(NSString *)arg_desc completion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.native_channel.ApiSifliFlutter.updateManageState"
      binaryMessenger:self.binaryMessenger
      codec:ApiSifliFlutterGetCodec()];
  [channel sendMessage:@[[NSNumber numberWithInteger: arg_state], arg_desc ?: [NSNull null]] reply:^(id reply) {
    NSNumber *output = reply;
    completion(output, nil);
  }];
}
- (void)updateManagerProgressProgress:(NSNumber *)arg_progress message:(NSString *)arg_message completion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.native_channel.ApiSifliFlutter.updateManagerProgress"
      binaryMessenger:self.binaryMessenger
      codec:ApiSifliFlutterGetCodec()];
  [channel sendMessage:@[arg_progress ?: [NSNull null], arg_message ?: [NSNull null]] reply:^(id reply) {
    NSNumber *output = reply;
    completion(output, nil);
  }];
}
- (void)logLogMsg:(NSString *)arg_logMsg completion:(void (^)(FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.native_channel.ApiSifliFlutter.log"
      binaryMessenger:self.binaryMessenger
      codec:ApiSifliFlutterGetCodec()];
  [channel sendMessage:@[arg_logMsg ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
@end

