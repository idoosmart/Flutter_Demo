// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol ApiGetAppInfo {
  /// 读取所有安装的APP信息
  /// Map => {type: $type, iconFilePath: $iconFilePath, appName: $appName, pkgName: $pkgName}
  /// 邮件、未接电话、日历、短信 （名称使用默认英语）
  func readInstallAppInfoList(force: Bool, completion: @escaping (Result<[[AnyHashable: Any?]], Error>) -> Void)
  /// 读取默认的APP信息
  /// Map => {type: $type, iconFilePath: $iconFilePath, appName: $appName, pkgName: $pkgName}
  func readDefaultAppList(completion: @escaping (Result<[[AnyHashable: Any?]], Error>) -> Void)
  /// 根据事件类型获取当前APP信息
  /// Map => {type: $type, iconFilePath: $iconFilePath, appName: $appName, pkgName: $pkgName}
  /// 邮件、未接电话、日历、短信 （名称使用默认英语）
  func readCurrentAppInfo(type: Int64, completion: @escaping (Result<[AnyHashable: Any?]?, Error>) -> Void)
  /// 事件号获取包名
  func convertEventType2PackageName(type: Int64, completion: @escaping (Result<String?, Error>) -> Void)
  /// 包名获取事件号
  func convertEventTypeByPackageName(name: String, completion: @escaping (Result<Int64, Error>) -> Void)
  /// 判断是否为默认app
  func isDefaultApp(packageName: String, completion: @escaping (Result<Bool, Error>) -> Void)
  /// Android 应用图标存放目录
  func androidAppIconDirPath(completion: @escaping (Result<String, Error>) -> Void)
  /// 复制应用图标
  func copyAppIcon(completion: @escaping (Result<Bool, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class ApiGetAppInfoSetup {
  /// The codec used by ApiGetAppInfo.
  /// Sets up an instance of `ApiGetAppInfo` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: ApiGetAppInfo?) {
    /// 读取所有安装的APP信息
    /// Map => {type: $type, iconFilePath: $iconFilePath, appName: $appName, pkgName: $pkgName}
    /// 邮件、未接电话、日历、短信 （名称使用默认英语）
    let readInstallAppInfoListChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.native_channel.ApiGetAppInfo.readInstallAppInfoList", binaryMessenger: binaryMessenger)
    if let api = api {
      readInstallAppInfoListChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let forceArg = args[0] as! Bool
        api.readInstallAppInfoList(force: forceArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      readInstallAppInfoListChannel.setMessageHandler(nil)
    }
    /// 读取默认的APP信息
    /// Map => {type: $type, iconFilePath: $iconFilePath, appName: $appName, pkgName: $pkgName}
    let readDefaultAppListChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.native_channel.ApiGetAppInfo.readDefaultAppList", binaryMessenger: binaryMessenger)
    if let api = api {
      readDefaultAppListChannel.setMessageHandler { _, reply in
        api.readDefaultAppList() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      readDefaultAppListChannel.setMessageHandler(nil)
    }
    /// 根据事件类型获取当前APP信息
    /// Map => {type: $type, iconFilePath: $iconFilePath, appName: $appName, pkgName: $pkgName}
    /// 邮件、未接电话、日历、短信 （名称使用默认英语）
    let readCurrentAppInfoChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.native_channel.ApiGetAppInfo.readCurrentAppInfo", binaryMessenger: binaryMessenger)
    if let api = api {
      readCurrentAppInfoChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let typeArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        api.readCurrentAppInfo(type: typeArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      readCurrentAppInfoChannel.setMessageHandler(nil)
    }
    /// 事件号获取包名
    let convertEventType2PackageNameChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.native_channel.ApiGetAppInfo.convertEventType2PackageName", binaryMessenger: binaryMessenger)
    if let api = api {
      convertEventType2PackageNameChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let typeArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        api.convertEventType2PackageName(type: typeArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      convertEventType2PackageNameChannel.setMessageHandler(nil)
    }
    /// 包名获取事件号
    let convertEventTypeByPackageNameChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.native_channel.ApiGetAppInfo.convertEventTypeByPackageName", binaryMessenger: binaryMessenger)
    if let api = api {
      convertEventTypeByPackageNameChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let nameArg = args[0] as! String
        api.convertEventTypeByPackageName(name: nameArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      convertEventTypeByPackageNameChannel.setMessageHandler(nil)
    }
    /// 判断是否为默认app
    let isDefaultAppChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.native_channel.ApiGetAppInfo.isDefaultApp", binaryMessenger: binaryMessenger)
    if let api = api {
      isDefaultAppChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let packageNameArg = args[0] as! String
        api.isDefaultApp(packageName: packageNameArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      isDefaultAppChannel.setMessageHandler(nil)
    }
    /// Android 应用图标存放目录
    let androidAppIconDirPathChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.native_channel.ApiGetAppInfo.androidAppIconDirPath", binaryMessenger: binaryMessenger)
    if let api = api {
      androidAppIconDirPathChannel.setMessageHandler { _, reply in
        api.androidAppIconDirPath() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      androidAppIconDirPathChannel.setMessageHandler(nil)
    }
    /// 复制应用图标
    let copyAppIconChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.native_channel.ApiGetAppInfo.copyAppIcon", binaryMessenger: binaryMessenger)
    if let api = api {
      copyAppIconChannel.setMessageHandler { _, reply in
        api.copyAppIcon() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      copyAppIconChannel.setMessageHandler(nil)
    }
  }
}
