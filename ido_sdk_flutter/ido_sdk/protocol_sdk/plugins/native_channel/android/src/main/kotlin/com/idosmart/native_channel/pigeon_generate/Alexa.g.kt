// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.idosmart.native_channel.pigeon_generate.api_alexa

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/**
 * 异常信息
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class ApiAlexaError (
  val errorCode: Long? = null,
  val errorMessage: String? = null,
  val extData: Map<String?, String?>? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): ApiAlexaError {
      val errorCode = list[0].let { if (it is Int) it.toLong() else it as Long? }
      val errorMessage = list[1] as String?
      val extData = list[2] as Map<String?, String?>?
      return ApiAlexaError(errorCode, errorMessage, extData)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      errorCode,
      errorMessage,
      extData,
    )
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface ApiAlexaHost {
  /** token 变更，空为退出状态 */
  fun onTokenChanged(token: String?)
  /** 创建下行流 */
  fun createDownStream(url: String, callback: (Result<Boolean>) -> Unit)
  /** 关闭下行流 */
  fun closeDownStream(callback: (Result<Boolean>) -> Unit)
  /**
   * 创建上行流 注：流数据由 askAudioData(Uint8List data, bool isEnd) 提供
   * url 请求地址
   * jsonBody 参数
   */
  fun createUploadStream(url: String, jsonBody: ByteArray, callback: (Result<Boolean>) -> Unit)
  /** 关闭上行流 */
  fun closeUploadStream(callback: (Result<Boolean>) -> Unit)
  /** ask 音频流数据（由设备采集） */
  fun askAudioData(data: ByteArray, isEnd: Boolean)

  companion object {
    /** The codec used by ApiAlexaHost. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
    /** Sets up an instance of `ApiAlexaHost` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: ApiAlexaHost?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.native_channel.ApiAlexaHost.onTokenChanged", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val tokenArg = args[0] as String?
            var wrapped: List<Any?>
            try {
              api.onTokenChanged(tokenArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.native_channel.ApiAlexaHost.createDownStream", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val urlArg = args[0] as String
            api.createDownStream(urlArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.native_channel.ApiAlexaHost.closeDownStream", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.closeDownStream() { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.native_channel.ApiAlexaHost.createUploadStream", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val urlArg = args[0] as String
            val jsonBodyArg = args[1] as ByteArray
            api.createUploadStream(urlArg, jsonBodyArg) { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.native_channel.ApiAlexaHost.closeUploadStream", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.closeUploadStream() { result: Result<Boolean> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.native_channel.ApiAlexaHost.askAudioData", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val dataArg = args[0] as ByteArray
            val isEndArg = args[1] as Boolean
            var wrapped: List<Any?>
            try {
              api.askAudioData(dataArg, isEndArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
@Suppress("UNCHECKED_CAST")
private object ApiAlexaFlutterCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ApiAlexaError.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is ApiAlexaError -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class ApiAlexaFlutter(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by ApiAlexaFlutter. */
    val codec: MessageCodec<Any?> by lazy {
      ApiAlexaFlutterCodec
    }
  }
  /**
   * reply 数据 (由Alexa上行流回复)，正常是由json和音频数据组成
   *
   * messageId 消息id
   * data 上行流收到的alex回复数据
   * isEnd 完成
   */
  fun replyAudioData(messageIdArg: String, dataArg: ByteArray, isEndArg: Boolean, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.native_channel.ApiAlexaFlutter.replyAudioData", codec)
    channel.send(listOf(messageIdArg, dataArg, isEndArg)) {
      callback()
    }
  }
  /** 上行流异常 */
  fun onUploadStreamError(errorArg: ApiAlexaError, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.native_channel.ApiAlexaFlutter.onUploadStreamError", codec)
    channel.send(listOf(errorArg)) {
      callback()
    }
  }
  /**
   * 下行流响应数据
   *
   * data 上行流收到的alex回复数据
   */
  fun downStreamData(dataArg: ByteArray, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.native_channel.ApiAlexaFlutter.downStreamData", codec)
    channel.send(listOf(dataArg)) {
      callback()
    }
  }
  /** 下行流异常 */
  fun onDownStreamError(errorArg: ApiAlexaError, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.native_channel.ApiAlexaFlutter.onDownStreamError", codec)
    channel.send(listOf(errorArg)) {
      callback()
    }
  }
  fun log(logMsgArg: String, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.native_channel.ApiAlexaFlutter.log", codec)
    channel.send(listOf(logMsgArg)) {
      callback()
    }
  }
}
