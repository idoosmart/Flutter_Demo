// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.idosmart.native_channel.pigeon_generate.api_sifli

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class IDOSFBoardType(val raw: Int) {
  X55(0),
  X56(1),
  X52(2);

  companion object {
    fun ofRaw(raw: Int): IDOSFBoardType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class OTAUpdateState(val raw: Int) {
  INIT(0),
  NOFILE(1),
  BLESTATECHANGE(2),
  ENTEROTA(3),
  RECONNECTDEVICE(4),
  DIDRECONNECTDEVICE(5),
  STARTING(6),
  UPLOADING(7),
  COMPLETED(8),
  FAIL(9);

  companion object {
    fun ofRaw(raw: Int): OTAUpdateState? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}
/**
 * Flutter调用原生的Api，
 *
 * Generated interface from Pigeon that represents a handler of messages from Flutter.
 */
interface ApiSifliHost {
  /**开始进行升级 */
  fun startOTA(files: List<Any?>, deviceUUID: String)
  fun startOTANor(files: List<Any?>, deviceUUID: String, platform: Long, isIndfu: Boolean)
  /** 停止升级 */
  fun stop()
  /**
   * 将png格式文件序列转为ezipBin类型。转换失败返回nil。V2.2
   * pngDatas png文件数据序列数组 （如果数组是多张图片，则会几张图片组合拼接成一张图片）
   * eColor 颜色字符串 color type as below: rgb565, rgb565A, rbg888, rgb888A
   * eType eizp类型 0 keep original alpha channel;1 no alpha chanel
   * binType bin类型 0 to support rotation; 1 for no rotation
   * boardType 主板芯片类型 @See SFBoardType 0:55x 1:56x  2:52x
   * @return ezip or apng result, nil for fail
   */
  fun sifliEBinFromPng(pngDatas: ByteArray, eColor: String, type: Long, binType: Long, boardType: IDOSFBoardType): ByteArray?

  companion object {
    /** The codec used by ApiSifliHost. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
    /** Sets up an instance of `ApiSifliHost` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: ApiSifliHost?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.native_channel.ApiSifliHost.startOTA", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val filesArg = args[0] as List<Any?>
            val deviceUUIDArg = args[1] as String
            var wrapped: List<Any?>
            try {
              api.startOTA(filesArg, deviceUUIDArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.native_channel.ApiSifliHost.startOTANor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val filesArg = args[0] as List<Any?>
            val deviceUUIDArg = args[1] as String
            val platformArg = args[2].let { if (it is Int) it.toLong() else it as Long }
            val isIndfuArg = args[3] as Boolean
            var wrapped: List<Any?>
            try {
              api.startOTANor(filesArg, deviceUUIDArg, platformArg, isIndfuArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.native_channel.ApiSifliHost.stop", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.stop()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.native_channel.ApiSifliHost.sifliEBinFromPng", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pngDatasArg = args[0] as ByteArray
            val eColorArg = args[1] as String
            val typeArg = args[2].let { if (it is Int) it.toLong() else it as Long }
            val binTypeArg = args[3].let { if (it is Int) it.toLong() else it as Long }
            val boardTypeArg = IDOSFBoardType.ofRaw(args[4] as Int)!!
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.sifliEBinFromPng(pngDatasArg, eColorArg, typeArg, binTypeArg, boardTypeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class ApiSifliFlutter(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by ApiSifliFlutter. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
  }
  /**
   * 升级状态 | Upgrade status
   * state 状态值 | Status value
   * desc 描述日志 | Status value
   */
  fun updateManageState(stateArg: OTAUpdateState, descArg: String, callback: (Boolean) -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.native_channel.ApiSifliFlutter.updateManageState", codec)
    channel.send(listOf(stateArg.raw, descArg)) {
      val result = it as Boolean
      callback(result)
    }
  }
  /**
   * 升级过程的进度 | Progress of the upgrade process
   * progress 进度 (0 ~ 1) | Progress (0 ~ 1)
   * message 升级日志信息 | Upgrade log information
   */
  fun updateManagerProgress(progressArg: Double, messageArg: String, callback: (Boolean) -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.native_channel.ApiSifliFlutter.updateManagerProgress", codec)
    channel.send(listOf(progressArg, messageArg)) {
      val result = it as Boolean
      callback(result)
    }
  }
  fun log(logMsgArg: String, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.native_channel.ApiSifliFlutter.log", codec)
    channel.send(listOf(logMsgArg)) {
      callback()
    }
  }
}
