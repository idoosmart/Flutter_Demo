// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

/// 异常信息
class ApiAlexaError {
  ApiAlexaError({
    this.errorCode,
    this.errorMessage,
    this.extData,
  });

  int? errorCode;

  String? errorMessage;

  Map<String?, String?>? extData;

  Object encode() {
    return <Object?>[
      errorCode,
      errorMessage,
      extData,
    ];
  }

  static ApiAlexaError decode(Object result) {
    result as List<Object?>;
    return ApiAlexaError(
      errorCode: result[0] as int?,
      errorMessage: result[1] as String?,
      extData: (result[2] as Map<Object?, Object?>?)?.cast<String?, String?>(),
    );
  }
}

class ApiAlexaHost {
  /// Constructor for [ApiAlexaHost].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  ApiAlexaHost({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = StandardMessageCodec();

  /// token 变更，空为退出状态
  Future<void> onTokenChanged(String? arg_token) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.native_channel.ApiAlexaHost.onTokenChanged', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_token]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  /// 创建下行流
  Future<bool> createDownStream(String arg_url) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.native_channel.ApiAlexaHost.createDownStream', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_url]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  /// 关闭下行流
  Future<bool> closeDownStream() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.native_channel.ApiAlexaHost.closeDownStream', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  /// 创建上行流 注：流数据由 askAudioData(Uint8List data, bool isEnd) 提供
  /// url 请求地址
  /// jsonBody 参数
  Future<bool> createUploadStream(String arg_url, Uint8List arg_jsonBody) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.native_channel.ApiAlexaHost.createUploadStream', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_url, arg_jsonBody]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  /// 关闭上行流
  Future<bool> closeUploadStream() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.native_channel.ApiAlexaHost.closeUploadStream', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  /// ask 音频流数据（由设备采集）
  Future<void> askAudioData(Uint8List arg_data, bool arg_isEnd) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.native_channel.ApiAlexaHost.askAudioData', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_data, arg_isEnd]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}

class _ApiAlexaFlutterCodec extends StandardMessageCodec {
  const _ApiAlexaFlutterCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is ApiAlexaError) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return ApiAlexaError.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class ApiAlexaFlutter {
  static const MessageCodec<Object?> codec = _ApiAlexaFlutterCodec();

  /// reply 数据 (由Alexa上行流回复)，正常是由json和音频数据组成
  ///
  /// messageId 消息id
  /// data 上行流收到的alex回复数据
  /// isEnd 完成
  void replyAudioData(String messageId, Uint8List data, bool isEnd);

  /// 上行流异常
  void onUploadStreamError(ApiAlexaError error);

  /// 下行流响应数据
  ///
  /// data 上行流收到的alex回复数据
  void downStreamData(Uint8List data);

  /// 下行流异常
  void onDownStreamError(ApiAlexaError error);

  void log(String logMsg);

  static void setup(ApiAlexaFlutter? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.native_channel.ApiAlexaFlutter.replyAudioData', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.native_channel.ApiAlexaFlutter.replyAudioData was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_messageId = (args[0] as String?);
          assert(arg_messageId != null,
              'Argument for dev.flutter.pigeon.native_channel.ApiAlexaFlutter.replyAudioData was null, expected non-null String.');
          final Uint8List? arg_data = (args[1] as Uint8List?);
          assert(arg_data != null,
              'Argument for dev.flutter.pigeon.native_channel.ApiAlexaFlutter.replyAudioData was null, expected non-null Uint8List.');
          final bool? arg_isEnd = (args[2] as bool?);
          assert(arg_isEnd != null,
              'Argument for dev.flutter.pigeon.native_channel.ApiAlexaFlutter.replyAudioData was null, expected non-null bool.');
          api.replyAudioData(arg_messageId!, arg_data!, arg_isEnd!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.native_channel.ApiAlexaFlutter.onUploadStreamError', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.native_channel.ApiAlexaFlutter.onUploadStreamError was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final ApiAlexaError? arg_error = (args[0] as ApiAlexaError?);
          assert(arg_error != null,
              'Argument for dev.flutter.pigeon.native_channel.ApiAlexaFlutter.onUploadStreamError was null, expected non-null ApiAlexaError.');
          api.onUploadStreamError(arg_error!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.native_channel.ApiAlexaFlutter.downStreamData', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.native_channel.ApiAlexaFlutter.downStreamData was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final Uint8List? arg_data = (args[0] as Uint8List?);
          assert(arg_data != null,
              'Argument for dev.flutter.pigeon.native_channel.ApiAlexaFlutter.downStreamData was null, expected non-null Uint8List.');
          api.downStreamData(arg_data!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.native_channel.ApiAlexaFlutter.onDownStreamError', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.native_channel.ApiAlexaFlutter.onDownStreamError was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final ApiAlexaError? arg_error = (args[0] as ApiAlexaError?);
          assert(arg_error != null,
              'Argument for dev.flutter.pigeon.native_channel.ApiAlexaFlutter.onDownStreamError was null, expected non-null ApiAlexaError.');
          api.onDownStreamError(arg_error!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.native_channel.ApiAlexaFlutter.log', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.native_channel.ApiAlexaFlutter.log was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_logMsg = (args[0] as String?);
          assert(arg_logMsg != null,
              'Argument for dev.flutter.pigeon.native_channel.ApiAlexaFlutter.log was null, expected non-null String.');
          api.log(arg_logMsg!);
          return;
        });
      }
    }
  }
}
