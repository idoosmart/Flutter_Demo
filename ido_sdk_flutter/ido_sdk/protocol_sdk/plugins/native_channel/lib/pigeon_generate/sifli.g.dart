// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

enum IDOSFBoardType {
  x55,
  x56,
  x52,
}

enum OTAUpdateState {
  init,
  noFile,
  bleStateChange,
  enterOta,
  reconnectDevice,
  didReconnectDevice,
  starting,
  uploading,
  completed,
  fail,
}

/// Flutter调用原生的Api，
class ApiSifliHost {
  /// Constructor for [ApiSifliHost].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  ApiSifliHost({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = StandardMessageCodec();

  ///开始进行升级
  Future<void> startOTA(List<Object?> arg_files, String arg_deviceUUID) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.native_channel.ApiSifliHost.startOTA', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_files, arg_deviceUUID]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> startOTANor(List<Object?> arg_files, String arg_deviceUUID, int arg_platform, bool arg_isIndfu) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.native_channel.ApiSifliHost.startOTANor', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_files, arg_deviceUUID, arg_platform, arg_isIndfu]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  /// 停止升级
  Future<void> stop() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.native_channel.ApiSifliHost.stop', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  /// 将png格式文件序列转为ezipBin类型。转换失败返回nil。V2.2
  /// pngDatas png文件数据序列数组 （如果数组是多张图片，则会几张图片组合拼接成一张图片）
  /// eColor 颜色字符串 color type as below: rgb565, rgb565A, rbg888, rgb888A
  /// eType eizp类型 0 keep original alpha channel;1 no alpha chanel
  /// binType bin类型 0 to support rotation; 1 for no rotation
  /// boardType 主板芯片类型 @See SFBoardType 0:55x 1:56x  2:52x
  /// @return ezip or apng result, nil for fail
  Future<Uint8List?> sifliEBinFromPng(Uint8List arg_pngDatas, String arg_eColor, int arg_type, int arg_binType, IDOSFBoardType arg_boardType) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.native_channel.ApiSifliHost.sifliEBinFromPng', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_pngDatas, arg_eColor, arg_type, arg_binType, arg_boardType.index]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return (replyList[0] as Uint8List?);
    }
  }
}

abstract class ApiSifliFlutter {
  static const MessageCodec<Object?> codec = StandardMessageCodec();

  /// 升级状态 | Upgrade status
  /// state 状态值 | Status value
  /// desc 描述日志 | Status value
  bool updateManageState(OTAUpdateState state, String desc);

  /// 升级过程的进度 | Progress of the upgrade process
  /// progress 进度 (0 ~ 1) | Progress (0 ~ 1)
  /// message 升级日志信息 | Upgrade log information
  bool updateManagerProgress(double progress, String message);

  void log(String logMsg);

  static void setup(ApiSifliFlutter? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.native_channel.ApiSifliFlutter.updateManageState', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.native_channel.ApiSifliFlutter.updateManageState was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final OTAUpdateState? arg_state = args[0] == null ? null : OTAUpdateState.values[args[0]! as int];
          assert(arg_state != null,
              'Argument for dev.flutter.pigeon.native_channel.ApiSifliFlutter.updateManageState was null, expected non-null OTAUpdateState.');
          final String? arg_desc = (args[1] as String?);
          assert(arg_desc != null,
              'Argument for dev.flutter.pigeon.native_channel.ApiSifliFlutter.updateManageState was null, expected non-null String.');
          final bool output = api.updateManageState(arg_state!, arg_desc!);
          return output;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.native_channel.ApiSifliFlutter.updateManagerProgress', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.native_channel.ApiSifliFlutter.updateManagerProgress was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final double? arg_progress = (args[0] as double?);
          assert(arg_progress != null,
              'Argument for dev.flutter.pigeon.native_channel.ApiSifliFlutter.updateManagerProgress was null, expected non-null double.');
          final String? arg_message = (args[1] as String?);
          assert(arg_message != null,
              'Argument for dev.flutter.pigeon.native_channel.ApiSifliFlutter.updateManagerProgress was null, expected non-null String.');
          final bool output = api.updateManagerProgress(arg_progress!, arg_message!);
          return output;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.native_channel.ApiSifliFlutter.log', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.native_channel.ApiSifliFlutter.log was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_logMsg = (args[0] as String?);
          assert(arg_logMsg != null,
              'Argument for dev.flutter.pigeon.native_channel.ApiSifliFlutter.log was null, expected non-null String.');
          api.log(arg_logMsg!);
          return;
        });
      }
    }
  }
}
