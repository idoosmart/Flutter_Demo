// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `protocol_c/protocol_c/c2flutter/ido_protocol_public_interface.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class ProtocolFfiBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  ProtocolFfiBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  ProtocolFfiBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// ------------------------------ 基础事件发送/接收 ------------------------------
  /// /**
  ///  * @brief:调用事件号发送内容给固件
  ///  * @param array Json字符串, 编码可以选择utf8
  ///  * @param len Json数据长度
  ///  * @param evt_type 事件号
  ///  * @param evt_base 事件方向,当jsonData是{}有效
  ///  * {
  ///  *  VBUS_EVT_BASE_SET = 0x2000,        //内部使用
  ///  *	VBUS_EVT_BASE_GET = 0x2100,
  ///  *	VBUS_EVT_BASE_BLE_REPLY = 0x2200,  //内部使用
  ///  *	VBUS_EVT_BASE_NOTICE_APP = 0x2300, //通知
  ///  *	VBUS_EVT_BASE_APP_SET = 0x2400,	   //设置
  ///  *	VBUS_EVT_BASE_APP_GET = 0x2500,	   //获取
  ///  *	VBUS_EVT_BASE_REQUEST = 0x2600	   //C库请求
  ///  * }
  ///  * @return:SUCCESS,成功
  ///  */
  int WriteJsonData(
    ffi.Pointer<ffi.Char> array,
    int len,
    int evt_type,
    int evt_base,
  ) {
    return _WriteJsonData(
      array,
      len,
      evt_type,
      evt_base,
    );
  }

  late final _WriteJsonDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int,
              ffi.Int)>>('WriteJsonData');
  late final _WriteJsonData = _WriteJsonDataPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, int, int)>();

  /// @brief:直接下发原始数据给固件
  /// @param data 协议原始数据
  /// @param length Json数据长度
  int WriteRawData(
    ffi.Pointer<ffi.Int> data,
    int length,
  ) {
    return _WriteRawData(
      data,
      length,
    );
  }

  late final _WriteRawDataPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Int>, ffi.Int)>>(
      'WriteRawData');
  late final _WriteRawData =
      _WriteRawDataPtr.asFunction<int Function(ffi.Pointer<ffi.Int>, int)>();

  /// @brief:app接收到数据,通过这个函数转发到c库（用于转发收到后的命令）
  /// @param rec_data 蓝牙接收到的二进制数据
  /// @param len 数据长度
  /// @param type 数据类型 0:ble 1:SPP
  /// @return int SUCCESS(0) 成功
  int ReceiveDatafromBle(
    ffi.Pointer<ffi.Char> rec_data,
    int len,
    int type,
  ) {
    return _ReceiveDatafromBle(
      rec_data,
      len,
      type,
    );
  }

  late final _ReceiveDatafromBlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int)>>('ReceiveDatafromBle');
  late final _ReceiveDatafromBle = _ReceiveDatafromBlePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, int)>();

  /// @brief: 蓝牙数据发送完成
  /// @return:
  /// SUCCESS(0) : 成功
  int tranDataSendComplete() {
    return _tranDataSendComplete();
  }

  late final _tranDataSendCompletePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('tranDataSendComplete');
  late final _tranDataSendComplete =
      _tranDataSendCompletePtr.asFunction<int Function()>();

  /// @brief:队列清除
  /// @return:SUCCESS(0)成功
  int ProtocolQueueClean() {
    return _ProtocolQueueClean();
  }

  late final _ProtocolQueueCleanPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ProtocolQueueClean');
  late final _ProtocolQueueClean =
      _ProtocolQueueCleanPtr.asFunction<int Function()>();

  /// @brief:获取Clib版本信息
  /// @param release_string clib版本号 三位表示release版本 四位表是develop版本
  /// @return:SUCCESS(0)成功 ERROR_NULL(14)失败
  int getClibVersion(
    ffi.Pointer<ffi.Char> release_string,
  ) {
    return _getClibVersion(
      release_string,
    );
  }

  late final _getClibVersionPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'getClibVersion');
  late final _getClibVersion =
      _getClibVersionPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief 响应原始数据回调
  /// @param func 蓝牙响应原始数据函数
  void responseRawData(
    protocol_data_response_handle func,
  ) {
    return _responseRawData(
      func,
    );
  }

  late final _responseRawDataPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(protocol_data_response_handle)>>(
      'responseRawData');
  late final _responseRawData = _responseRawDataPtr
      .asFunction<void Function(protocol_data_response_handle)>();

  /// @brief 初始化c库
  /// @param func 蓝牙发送函数
  /// @return int SUCCESS(0) 成功
  int callBackEnable(
    protocol_data_send_handle func,
  ) {
    return _callBackEnable(
      func,
    );
  }

  late final _callBackEnablePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(protocol_data_send_handle)>>(
          'callBackEnable');
  late final _callBackEnable =
      _callBackEnablePtr.asFunction<int Function(protocol_data_send_handle)>();

  /// @brief 启用log
  /// @param isPrintConsole 是否打印控制台 {0:不打开 1:打开}
  /// @param isWriteFile 是否写文件 {0:不写文件 1:写文件}
  /// @param filePath 文件路径,注意最路径后面要有一个斜杠
  /// @return SUCCESS(0) 成功
  int EnableLog(
    int isPrintConsole,
    int isWriteFile,
    ffi.Pointer<ffi.Char> filePath,
  ) {
    return _EnableLog(
      isPrintConsole,
      isWriteFile,
      filePath,
    );
  }

  late final _EnableLogPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Int, ffi.Pointer<ffi.Char>)>>('EnableLog');
  late final _EnableLog =
      _EnableLogPtr.asFunction<int Function(int, int, ffi.Pointer<ffi.Char>)>();

  /// @brief 设置log保存天数
  /// @param saveDay 保存日志天数 最少两天
  /// @return SUCCESS(0) 成功
  int SetSaveLogDay(
    int saveDay,
  ) {
    return _SetSaveLogDay(
      saveDay,
    );
  }

  late final _SetSaveLogDayPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('SetSaveLogDay');
  late final _SetSaveLogDay = _SetSaveLogDayPtr.asFunction<int Function(int)>();

  /// @brief:设置当前绑定状态
  /// @param mode 模式
  /// {
  /// PROTOCOL_MODE_UNBIND = 0, //没有绑定
  /// PROTOCOL_MODE_BIND   = 1, //已经绑定
  /// PROTOCOL_MODE_OTA    = 2  //升级模式
  /// }
  /// @return SUCCESS(0) 成功
  int SetMode(
    int mode,
  ) {
    return _SetMode(
      mode,
    );
  }

  late final _SetModePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('SetMode');
  late final _SetMode = _SetModePtr.asFunction<int Function(int)>();

  /// @brief:获取当前绑定状态
  /// @return:
  /// {
  /// PROTOCOL_MODE_UNBIND = 0, //没有绑定
  /// PROTOCOL_MODE_BIND   = 1, //已经绑定
  /// PROTOCOL_MODE_OTA    = 2  //升级模式
  /// }
  int GetMode() {
    return _GetMode();
  }

  late final _GetModePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('GetMode');
  late final _GetMode = _GetModePtr.asFunction<int Function()>();

  /// @brief 设置持久化路径, 用于保存数据(分段同步), 初始化时调用即可，无顺序要求，最后不要加斜杠 /
  /// @param filePath 持久化目录路径
  /// @return SUCCESS(0) 成功
  int setFilePath(
    ffi.Pointer<ffi.Char> filePath,
  ) {
    return _setFilePath(
      filePath,
    );
  }

  late final _setFilePathPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'setFilePath');
  late final _setFilePath =
      _setFilePathPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief 设置持久化路径, 用于保存功能表数据, 初始化时调用即可，无顺序要求，最后不要加斜杠 /
  /// @param filePath 持久化目录路径
  /// @return SUCCESS(0) 成功
  int setFunctionTableFilePath(
    ffi.Pointer<ffi.Char> filePath,
  ) {
    return _setFunctionTableFilePath(
      filePath,
    );
  }

  late final _setFunctionTableFilePathPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'setFunctionTableFilePath');
  late final _setFunctionTableFilePath = _setFunctionTableFilePathPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief:设置运行环境 release / debug
  /// @param mode 0:debug 1:relese
  /// @return:
  /// SUCCESS(0) : 成功
  int setRunMode(
    int mode,
  ) {
    return _setRunMode(
      mode,
    );
  }

  late final _setRunModePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('setRunMode');
  late final _setRunMode = _setRunModePtr.asFunction<int Function(int)>();

  /// @brief:设置流数据是否输出开关
  /// @param iswrite 控制写入流数据开关公开 0不写入 1写入 默认不写入流数据
  /// @return:
  /// SUCCESS(0) : 成功
  int setWriteStreamByte(
    int iswrite,
  ) {
    return _setWriteStreamByte(
      iswrite,
    );
  }

  late final _setWriteStreamBytePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'setWriteStreamByte');
  late final _setWriteStreamByte =
      _setWriteStreamBytePtr.asFunction<int Function(int)>();

  /// @brief:启用或者关闭固件补丁(暂时不启用)
  /// @param index 索引号
  /// @param enable 使能
  /// {enable    = 1, //使能
  /// disenable = 2  //不使能}
  /// @return:
  /// SUCCESS(0) : 成功
  int SetPatch(
    int index,
    int enable,
  ) {
    return _SetPatch(
      index,
      enable,
    );
  }

  late final _SetPatchPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'SetPatch');
  late final _SetPatch = _SetPatchPtr.asFunction<int Function(int, int)>();

  /// @brief 获取同步配置状态
  /// @return bool   0:空闲 1:忙碌, 正在同步
  int GetSyncConfigStatus() {
    return _GetSyncConfigStatus();
  }

  late final _GetSyncConfigStatusPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('GetSyncConfigStatus');
  late final _GetSyncConfigStatus =
      _GetSyncConfigStatusPtr.asFunction<int Function()>();

  /// ------------------------------ v2同步健康、同步GPS和多运动 ------------------------------
  /// /**
  ///  * @brief:开始v2同步健康数据
  ///  * @return:
  ///  *   SUCCESS(0) : 成功
  ///  */
  int StartSyncV2HealthData() {
    return _StartSyncV2HealthData();
  }

  late final _StartSyncV2HealthDataPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('StartSyncV2HealthData');
  late final _StartSyncV2HealthData =
      _StartSyncV2HealthDataPtr.asFunction<int Function()>();

  /// @brief:停止v2同步健康数据
  /// @return:
  /// SUCCESS(0) : 成功
  int StopSyncV2HealthData() {
    return _StopSyncV2HealthData();
  }

  late final _StopSyncV2HealthDataPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('StopSyncV2HealthData');
  late final _StopSyncV2HealthData =
      _StopSyncV2HealthDataPtr.asFunction<int Function()>();

  /// @brief:设置v2同步健康数据偏移
  /// @param type 数据类型
  /// {
  /// type = 0,运动数据
  /// type = 1,睡眠数据,不支持
  /// type = 2,心率数据
  /// }
  /// @param value 偏移数值
  /// @return:
  /// SUCCESS(0) : 成功
  int SetSyncV2HealthOffset(
    int type,
    int value,
  ) {
    return _SetSyncV2HealthOffset(
      type,
      value,
    );
  }

  late final _SetSyncV2HealthOffsetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'SetSyncV2HealthOffset');
  late final _SetSyncV2HealthOffset =
      _SetSyncV2HealthOffsetPtr.asFunction<int Function(int, int)>();

  /// @brief:开始同步v2运动数据
  /// @return:
  /// SUCCESS(0) : 成功
  int startSyncV2ActivityData() {
    return _startSyncV2ActivityData();
  }

  late final _startSyncV2ActivityDataPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'startSyncV2ActivityData');
  late final _startSyncV2ActivityData =
      _startSyncV2ActivityDataPtr.asFunction<int Function()>();

  /// @brief:停止同步v2运动数据
  /// @return:
  /// SUCCESS(0) : 成功
  int stopSyncV2ActivityData() {
    return _stopSyncV2ActivityData();
  }

  late final _stopSyncV2ActivityDataPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('stopSyncV2ActivityData');
  late final _stopSyncV2ActivityData =
      _stopSyncV2ActivityDataPtr.asFunction<int Function()>();

  /// @brief:获取v2同步运动状态
  /// @return: 返回同步状态
  /// {false:未开启同步 true:已开启同步}
  int getSyncV2ActivityDataStatus() {
    return _getSyncV2ActivityDataStatus();
  }

  late final _getSyncV2ActivityDataStatusPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'getSyncV2ActivityDataStatus');
  late final _getSyncV2ActivityDataStatus =
      _getSyncV2ActivityDataStatusPtr.asFunction<int Function()>();

  /// @brief 开始同步v2GPS数据
  /// @return SUCCESS(0) 成功
  int startSyncV2GpsData() {
    return _startSyncV2GpsData();
  }

  late final _startSyncV2GpsDataPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('startSyncV2GpsData');
  late final _startSyncV2GpsData =
      _startSyncV2GpsDataPtr.asFunction<int Function()>();

  /// @brief 停止同步GPS数据
  /// @return SUCCESS(0) : 成功
  int stopSyncV2GpsData() {
    return _stopSyncV2GpsData();
  }

  late final _stopSyncV2GpsDataPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('stopSyncV2GpsData');
  late final _stopSyncV2GpsData =
      _stopSyncV2GpsDataPtr.asFunction<int Function()>();

  /// @brief 获取v2同步GPS状态
  /// @return 返回同步状态
  /// {false:未开启同步 true:已开启同步}
  int getSyncV2GpsDataStatus() {
    return _getSyncV2GpsDataStatus();
  }

  late final _getSyncV2GpsDataStatusPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getSyncV2GpsDataStatus');
  late final _getSyncV2GpsDataStatus =
      _getSyncV2GpsDataStatusPtr.asFunction<int Function()>();

  /// ------------------------------ v3同步健康 ------------------------------
  /// /**
  ///  * @brief 解绑清除v3缓存健康数据
  ///  * @return SUCCESS(0) 成功
  ///  */
  int unBindClearV3HealthData() {
    return _unBindClearV3HealthData();
  }

  late final _unBindClearV3HealthDataPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'unBindClearV3HealthData');
  late final _unBindClearV3HealthData =
      _unBindClearV3HealthDataPtr.asFunction<int Function()>();

  /// @brief 开始同步v3健康数据
  /// @return SUCCESS(0)成功
  int startSyncV3HealthData() {
    return _startSyncV3HealthData();
  }

  late final _startSyncV3HealthDataPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('startSyncV3HealthData');
  late final _startSyncV3HealthData =
      _startSyncV3HealthDataPtr.asFunction<int Function()>();

  /// @brief app每半个小时主动更新 开始同步V3数据，睡眠数据不返回
  /// @return SUCCESS(0) 成功
  int startAutomaticSyncV3HealthData() {
    return _startAutomaticSyncV3HealthData();
  }

  late final _startAutomaticSyncV3HealthDataPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'startAutomaticSyncV3HealthData');
  late final _startAutomaticSyncV3HealthData =
      _startAutomaticSyncV3HealthDataPtr.asFunction<int Function()>();

  /// @brief 停止同步v3健康数据
  /// @return SUCCESS(0)成功
  int stopSyncV3HealthData() {
    return _stopSyncV3HealthData();
  }

  late final _stopSyncV3HealthDataPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('stopSyncV3HealthData');
  late final _stopSyncV3HealthData =
      _stopSyncV3HealthDataPtr.asFunction<int Function()>();

  /// @brief:手动停止快速同步配置
  /// @return int SUCCESS(0)成功
  int ProtocolSyncConfigStop() {
    return _ProtocolSyncConfigStop();
  }

  late final _ProtocolSyncConfigStopPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ProtocolSyncConfigStop');
  late final _ProtocolSyncConfigStop =
      _ProtocolSyncConfigStopPtr.asFunction<int Function()>();

  /// ------------------------------ 数据传输接口 ------------------------------
  /// /**
  ///  * @brief 开始传输数据
  ///  * @return
  ///  *   SUCCESS(0) : 成功
  ///  */
  int tranDataStart() {
    return _tranDataStart();
  }

  late final _tranDataStartPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('tranDataStart');
  late final _tranDataStart = _tranDataStartPtr.asFunction<int Function()>();

  /// @brief 开始传输数据, 且设置续传次数
  /// @param times 续传次数
  /// @return
  /// SUCCESS(0) : 成功
  int tranDataStartWithTryTime(
    int times,
  ) {
    return _tranDataStartWithTryTime(
      times,
    );
  }

  late final _tranDataStartWithTryTimePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'tranDataStartWithTryTime');
  late final _tranDataStartWithTryTime =
      _tranDataStartWithTryTimePtr.asFunction<int Function(int)>();

  /// @brief:停止传输数据(无效,使用tranDataManualStop)
  /// @return
  /// SUCCESS:成功
  int tranDataStop() {
    return _tranDataStop();
  }

  late final _tranDataStopPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('tranDataStop');
  late final _tranDataStop = _tranDataStopPtr.asFunction<int Function()>();

  /// @brief:手动停止传输数据
  /// @return:
  /// SUCCESS:成功
  int tranDataManualStop() {
    return _tranDataManualStop();
  }

  late final _tranDataManualStopPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('tranDataManualStop');
  late final _tranDataManualStop =
      _tranDataManualStopPtr.asFunction<int Function()>();

  /// @brief:获取传输状态
  /// @return:
  /// {true(1) : 传输已开启
  /// false(0) : 传输未开启}
  int tranDataisStart() {
    return _tranDataisStart();
  }

  late final _tranDataisStartPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('tranDataisStart');
  late final _tranDataisStart =
      _tranDataisStartPtr.asFunction<int Function()>();

  /// @brief 配置文件传输数据 version_date:1.0.1.1后取消该方法，使用tranDataSetBuffByPath配置文件
  /// @param data 文件的字节流
  /// @param dataType 文件类型
  /// @param dataLen 字节流大小
  /// {0 无效
  /// 1 分区表
  /// 2 apgs文件
  /// 3 gps固件}
  /// @param fileName 文件名+后缀, 注:文件名可以是空但是后缀不能为空(排除掉某些固定名称的文件例如:EPO.DAT)
  /// @param compressionType 压缩类型
  /// {0 为不适用压缩
  /// 1 为zlib压缩
  /// 2 为fastlz压缩}
  /// @param  oriSize 压缩前文件大小
  /// {目前对表盘文件有效，表示没有压缩前的文件大小，即iwf文件大小}
  /// 如果需要传递文件名 ，dataType需要使用0xff,如果是传递agps，两个分部填""和0就可以了
  /// @return SUCCESS(0) 成功
  int tranDataSetBuff(
    ffi.Pointer<ffi.Char> data,
    int dataType,
    int dataLen,
    ffi.Pointer<ffi.Char> fileName,
    int compressionType,
    int oriSize,
  ) {
    return _tranDataSetBuff(
      data,
      dataType,
      dataLen,
      fileName,
      compressionType,
      oriSize,
    );
  }

  late final _tranDataSetBuffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int)>>('tranDataSetBuff');
  late final _tranDataSetBuff = _tranDataSetBuffPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Char>, int, int)>();

  /// @brief 配置文件传输数据，输入文件路径由C库读取文件数据
  /// @param dataType 文件类型
  /// {0 无效
  /// 1 分区表
  /// 2 apgs文件
  /// 3 gps固件}
  /// @param srcPath 素材文件路径   最大4096字节
  /// @param dstName 目标文件名+后缀, 注:文件名可以是空但是后缀不能为空(排除掉某些固定名称的文件例如:EPO.DAT) 最大256字节
  /// @param compressionType 压缩类型
  /// {0 为不适用压缩
  /// 1 为zlib压缩
  /// 2 为fastlz压缩}
  /// @param  oriSize 压缩前文件大小
  /// {目前对表盘文件有效，表示没有压缩前的文件大小，即iwf文件大小}
  /// 如果需要传递文件名 ，dataType需要使用0xff,如果是传递agps，两个分部填""和0就可以了
  /// @return SUCCESS(0) 成功
  int tranDataSetBuffByPath(
    int dataType,
    ffi.Pointer<ffi.Char> srcPath,
    ffi.Pointer<ffi.Char> dstName,
    int compressionType,
    int oriSize,
  ) {
    return _tranDataSetBuffByPath(
      dataType,
      srcPath,
      dstName,
      compressionType,
      oriSize,
    );
  }

  late final _tranDataSetBuffByPathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Int)>>('tranDataSetBuffByPath');
  late final _tranDataSetBuffByPath = _tranDataSetBuffByPathPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, int)>();

  /// @brief 设置PRN,接收num包通知一次, 用来调节速度和可靠性之间的平衡
  /// @param num  app每发num包, 固件回应一次
  /// @return:
  /// SUCCESS(0) : 成功
  int tranDataSetPRN(
    int num,
  ) {
    return _tranDataSetPRN(
      num,
    );
  }

  late final _tranDataSetPRNPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('tranDataSetPRN');
  late final _tranDataSetPRN =
      _tranDataSetPRNPtr.asFunction<int Function(int)>();

  /// ------------------------------ SPP文件传输功能 ------------------------------
  /// /**
  ///  * @brief 开始传输数据
  ///  * @return
  ///  *   SUCCESS(0) : 成功
  ///  */
  int sppTranDataStart() {
    return _sppTranDataStart();
  }

  late final _sppTranDataStartPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('sppTranDataStart');
  late final _sppTranDataStart =
      _sppTranDataStartPtr.asFunction<int Function()>();

  /// @brief 开始传输数据, 且设置续传次数
  /// @param times 续传次数
  /// @return
  /// SUCCESS(0) : 成功
  int sppTranDataStartWithTryTime(
    int times,
  ) {
    return _sppTranDataStartWithTryTime(
      times,
    );
  }

  late final _sppTranDataStartWithTryTimePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'sppTranDataStartWithTryTime');
  late final _sppTranDataStartWithTryTime =
      _sppTranDataStartWithTryTimePtr.asFunction<int Function(int)>();

  /// @brief:停止spp传输数据(无效,使用sppTranDataManualStop)
  /// @return
  /// SUCCESS:成功
  int sppTranDataStop() {
    return _sppTranDataStop();
  }

  late final _sppTranDataStopPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('sppTranDataStop');
  late final _sppTranDataStop =
      _sppTranDataStopPtr.asFunction<int Function()>();

  /// @brief:手动停止spp传输数据
  /// @return:
  /// SUCCESS:成功
  int sppTranDataManualStop() {
    return _sppTranDataManualStop();
  }

  late final _sppTranDataManualStopPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('sppTranDataManualStop');
  late final _sppTranDataManualStop =
      _sppTranDataManualStopPtr.asFunction<int Function()>();

  /// @brief:获取传输状态
  /// @return:
  /// {true(1) : 传输已开启
  /// false(0) : 传输未开启}
  int sppTranDataisStart() {
    return _sppTranDataisStart();
  }

  late final _sppTranDataisStartPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('sppTranDataisStart');
  late final _sppTranDataisStart =
      _sppTranDataisStartPtr.asFunction<int Function()>();

  /// @brief SPP设置文件传输Buff version_date:1.0.1.1后取消该方法，使用sppTranDataSetBuffByPath配置文件
  /// @param data 文件的字节流
  /// @param dataType 文件类型
  /// @param dataLen 字节流大小
  /// {0 无效
  /// 1 分区表
  /// 2 apgs文件
  /// 3 gps固件}
  /// @param fileName 文件名+后缀, 注:文件名可以是空但是后缀不能为空(排除掉某些固定名称的文件例如:EPO.DAT)
  /// @param compressionType 压缩类型
  /// {0 为不适用压缩
  /// 1 为zlib压缩
  /// 2 为fastlz压缩}
  /// @param  oriSize 压缩前文件大小
  /// {目前对表盘文件有效，表示没有压缩前的文件大小，即iwf文件大小}
  /// 如果需要传递文件名 ，dataType需要使用0xff,如果是传递agps，两个分部填""和0就可以了
  /// @return SUCCESS(0) 成功
  int sppTranDataSetBuff(
    ffi.Pointer<ffi.Char> data,
    int dataType,
    int dataLen,
    ffi.Pointer<ffi.Char> fileName,
    int compressionType,
    int oriSize,
  ) {
    return _sppTranDataSetBuff(
      data,
      dataType,
      dataLen,
      fileName,
      compressionType,
      oriSize,
    );
  }

  late final _sppTranDataSetBuffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int)>>('sppTranDataSetBuff');
  late final _sppTranDataSetBuff = _sppTranDataSetBuffPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, int, int, ffi.Pointer<ffi.Char>, int, int)>();

  /// @brief SPP设置文件传输Buff，输入文件路径由C库读取文件数据
  /// @param dataType 文件类型
  /// {0 无效
  /// 1 分区表
  /// 2 apgs文件
  /// 3 gps固件}
  /// @param srcPath 素材文件路径   最大4096字节
  /// @param dstName 目标文件名+后缀, 注:文件名可以是空但是后缀不能为空(排除掉某些固定名称的文件例如:EPO.DAT) 最大256字节
  /// @param compressionType 压缩类型
  /// {0 为不适用压缩
  /// 1 为zlib压缩
  /// 2 为fastlz压缩}
  /// @param  oriSize 压缩前文件大小
  /// {目前对表盘文件有效，表示没有压缩前的文件大小，即iwf文件大小}
  /// 如果需要传递文件名 ，dataType需要使用0xff,如果是传递agps，两个分部填""和0就可以了
  /// @return SUCCESS(0) 成功
  int sppTranDataSetBuffByPath(
    int dataType,
    ffi.Pointer<ffi.Char> srcPath,
    ffi.Pointer<ffi.Char> dstName,
    int compressionType,
    int oriSize,
  ) {
    return _sppTranDataSetBuffByPath(
      dataType,
      srcPath,
      dstName,
      compressionType,
      oriSize,
    );
  }

  late final _sppTranDataSetBuffByPathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Int)>>('sppTranDataSetBuffByPath');
  late final _sppTranDataSetBuffByPath =
      _sppTranDataSetBuffByPathPtr.asFunction<
          int Function(
              int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, int)>();

  /// @brief 设置PRN,接收num包通知一次, 用来调节速度和可靠性之间的平衡
  /// @param num  app每发num包, 固件回应一次
  /// @return:
  /// SUCCESS(0) : 成功
  int sppTranDataSetPRN(
    int num,
  ) {
    return _sppTranDataSetPRN(
      num,
    );
  }

  late final _sppTranDataSetPRNPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'sppTranDataSetPRN');
  late final _sppTranDataSetPRN =
      _sppTranDataSetPRNPtr.asFunction<int Function(int)>();

  /// --------------------------- alexa语音文本传输 --------------------------------
  /// /**
  ///  * @brief: app设置语音文件传输配置
  ///  * @param prn app控制ble接收几个包回复一次数据
  ///  * @param voiceType 传输类型  0:无效 1:sbc 2:opus 3:mp3
  ///  * @param fileLen 语音文件大小
  ///  * @return:
  ///  *   SUCCESS(0) : 成功
  ///  */
  int voiceFileTranToBleSetParam(
    int prn,
    int voiceType,
    int fileLen,
  ) {
    return _voiceFileTranToBleSetParam(
      prn,
      voiceType,
      fileLen,
    );
  }

  late final _voiceFileTranToBleSetParamPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, ffi.Int)>>(
          'voiceFileTranToBleSetParam');
  late final _voiceFileTranToBleSetParam =
      _voiceFileTranToBleSetParamPtr.asFunction<int Function(int, int, int)>();

  /// @brief: app开始传输语音文件
  /// @param filename 需要传输的语音文件完整路径 包括文件名
  /// @return:
  /// SUCCESS(0) : 成功
  int voiceFileTranToBleStart(
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _voiceFileTranToBleStart(
      filename,
    );
  }

  late final _voiceFileTranToBleStartPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'voiceFileTranToBleStart');
  late final _voiceFileTranToBleStart = _voiceFileTranToBleStartPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief: app停止发送语音数据
  /// @return:
  /// SUCCESS(0) : 成功
  int voiceFileTranToBleStop() {
    return _voiceFileTranToBleStop();
  }

  late final _voiceFileTranToBleStopPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('voiceFileTranToBleStop');
  late final _voiceFileTranToBleStop =
      _voiceFileTranToBleStopPtr.asFunction<int Function()>();

  /// @brief: app传输语音文件状态回调注册
  /// @return:
  /// SUCCESS(0) : 成功
  int voiceFileTranToBleStateCbReg(
    protocol_report_voice_file_tran_status_cb_handle func,
  ) {
    return _voiceFileTranToBleStateCbReg(
      func,
    );
  }

  late final _voiceFileTranToBleStateCbRegPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  protocol_report_voice_file_tran_status_cb_handle)>>(
      'voiceFileTranToBleStateCbReg');
  late final _voiceFileTranToBleStateCbReg =
      _voiceFileTranToBleStateCbRegPtr.asFunction<
          int Function(protocol_report_voice_file_tran_status_cb_handle)>();

  /// @brief: app传输语音文件操作固件回复结果回调注册
  /// @return:
  /// SUCCESS(0) : 成功
  int voiceFileTranToBleSendOperateReplyCbReg(
    protocol_report_voice_file_tran_send_operate_reply_cb_handle func,
  ) {
    return _voiceFileTranToBleSendOperateReplyCbReg(
      func,
    );
  }

  late final _voiceFileTranToBleSendOperateReplyCbRegPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  protocol_report_voice_file_tran_send_operate_reply_cb_handle)>>(
      'voiceFileTranToBleSendOperateReplyCbReg');
  late final _voiceFileTranToBleSendOperateReplyCbReg =
      _voiceFileTranToBleSendOperateReplyCbRegPtr.asFunction<
          int Function(
              protocol_report_voice_file_tran_send_operate_reply_cb_handle)>();

  /// @brief: 通知ble停止传输opus数据(语音数据)
  /// @return:
  /// SUCCESS(0) : 成功
  int stopReceiveVoiceDataFromBle() {
    return _stopReceiveVoiceDataFromBle();
  }

  late final _stopReceiveVoiceDataFromBlePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'stopReceiveVoiceDataFromBle');
  late final _stopReceiveVoiceDataFromBle =
      _stopReceiveVoiceDataFromBlePtr.asFunction<int Function()>();

  /// @brief: 上报接收到的opus语音文件状态回调注册
  /// @return:
  /// SUCCESS(0) : 成功
  int reportVoiceDataFromBleOpusStateCbReg(
    protocol_report_opus_voice_file_tran_status_cb_handle func,
  ) {
    return _reportVoiceDataFromBleOpusStateCbReg(
      func,
    );
  }

  late final _reportVoiceDataFromBleOpusStateCbRegPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  protocol_report_opus_voice_file_tran_status_cb_handle)>>(
      'reportVoiceDataFromBleOpusStateCbReg');
  late final _reportVoiceDataFromBleOpusStateCbReg =
      _reportVoiceDataFromBleOpusStateCbRegPtr.asFunction<
          int Function(
              protocol_report_opus_voice_file_tran_status_cb_handle)>();

  /// @brief: 上报接收的opus语音文件丢包率回调注册
  /// @return:
  /// SUCCESS(0) : 成功
  int reportVoiceDataFromBleLostDataCbReg(
    protocol_report_opus_voice_file_tran_lost_data_cb_handle func,
  ) {
    return _reportVoiceDataFromBleLostDataCbReg(
      func,
    );
  }

  late final _reportVoiceDataFromBleLostDataCbRegPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  protocol_report_opus_voice_file_tran_lost_data_cb_handle)>>(
      'reportVoiceDataFromBleLostDataCbReg');
  late final _reportVoiceDataFromBleLostDataCbReg =
      _reportVoiceDataFromBleLostDataCbRegPtr.asFunction<
          int Function(
              protocol_report_opus_voice_file_tran_lost_data_cb_handle)>();

  /// @brief: 上报接收opus语音文件每段pcm编码数据回调注册
  /// @return:
  /// SUCCESS(0) : 成功
  int reportVoiceDataFromBleEachPcmDataCbReg(
    protocol_report_opus_voice_file_tran_data_cb_handle func,
  ) {
    return _reportVoiceDataFromBleEachPcmDataCbReg(
      func,
    );
  }

  late final _reportVoiceDataFromBleEachPcmDataCbRegPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  protocol_report_opus_voice_file_tran_data_cb_handle)>>(
      'reportVoiceDataFromBleEachPcmDataCbReg');
  late final _reportVoiceDataFromBleEachPcmDataCbReg =
      _reportVoiceDataFromBleEachPcmDataCbRegPtr.asFunction<
          int Function(protocol_report_opus_voice_file_tran_data_cb_handle)>();

  /// @brief:上报接收的opus上报语音文件数据回调注册
  /// @return:
  /// SUCCESS(0) : 成功
  int reportVoiceDataFromBleDataCbReg(
    protocol_report_opus_voice_file_tran_data_cb_handle func,
  ) {
    return _reportVoiceDataFromBleDataCbReg(
      func,
    );
  }

  late final _reportVoiceDataFromBleDataCbRegPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  protocol_report_opus_voice_file_tran_data_cb_handle)>>(
      'reportVoiceDataFromBleDataCbReg');
  late final _reportVoiceDataFromBleDataCbReg =
      _reportVoiceDataFromBleDataCbRegPtr.asFunction<
          int Function(protocol_report_opus_voice_file_tran_data_cb_handle)>();

  /// @brief:上报接收的opus上报每帧的语音文件数据回调注册
  /// @return:
  /// SUCCESS(0) : 成功
  int reportVoiceDataFromBleEachEncodeDataCbReg(
    protocol_report_opus_voice_file_tran_data_cb_handle func,
  ) {
    return _reportVoiceDataFromBleEachEncodeDataCbReg(
      func,
    );
  }

  late final _reportVoiceDataFromBleEachEncodeDataCbRegPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  protocol_report_opus_voice_file_tran_data_cb_handle)>>(
      'reportVoiceDataFromBleEachEncodeDataCbReg');
  late final _reportVoiceDataFromBleEachEncodeDataCbReg =
      _reportVoiceDataFromBleEachEncodeDataCbRegPtr.asFunction<
          int Function(protocol_report_opus_voice_file_tran_data_cb_handle)>();

  /// ------------------------------ GPS轨迹工具 ------------------------------
  /// /**
  ///  * @brief: gsp运动后优化轨迹,根据运动类型初始化速度阈值，若输入其他运动类型，会导致无运动轨迹
  ///  * @param motion_type_in
  ///  * 运动类型:
  ///  * {
  ///  * 1、户外走路 = 52, 走路 = 1, 徒步 = 4, 运动类型设为0
  ///  * 2、户外跑步 = 48, 跑步 = 2, 运动类型设为1
  ///  * 3、户外骑行 = 50, 骑行 = 3, 运动型性设为2
  ///  *}
  ///  * @return
  ///  *  初始化参数,满足运动类型输出结果为1，否则为0
  ///  */
  int initType(
    int motion_type_in,
  ) {
    return _initType(
      motion_type_in,
    );
  }

  late final _initTypePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('initType');
  late final _initType = _initTypePtr.asFunction<int Function(int)>();

  /// @brief 初始化算法内部参数
  void initParameter() {
    return _initParameter();
  }

  late final _initParameterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('initParameter');
  late final _initParameter = _initParameterPtr.asFunction<void Function()>();

  /// @brief gps数据实时处理入口,需要对输出的数据进行判断，若纬度为-180则为错误值，不应该输出 ，每次只会传进来一个坐标
  /// @param data json字符串
  /// @param len 字符串长度 不超过2MByte
  /// json字符串内容:
  /// android:
  /// { lon,经度,数据类型double
  /// lat,纬度,数据类型double
  /// timestamp,时间戳,数据类型int
  /// accuracy,定位精度,数据类型double
  /// gpsaccuracystatus,定位等级，0 = 定位未知, 1 = 定位好, 2 = 定位差,数据类型int}
  /// ios:
  /// { lon,经度,数据类型double
  /// lat,纬度,数据类型double
  /// timestamp,时间戳,数据类型int
  /// hor_accuracy,水平精度,数据类型double
  /// ver_accuracy,垂直精度,数据类型double
  /// }
  /// @return json字符串 内容与上面json字符串内容一致
  ffi.Pointer<ffi.Char> appGpsAlgProcessRealtime(
    ffi.Pointer<ffi.Char> data,
    int len,
  ) {
    return _appGpsAlgProcessRealtime(
      data,
      len,
    );
  }

  late final _appGpsAlgProcessRealtimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('appGpsAlgProcessRealtime');
  late final _appGpsAlgProcessRealtime = _appGpsAlgProcessRealtimePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  /// @brief 平滑数据，结果保存在数组lat和lon中
  /// @param data json字符串
  /// @param len 字符串长度
  /// json字符串内容:
  /// {lat,纬度数组,长度为len,数据类型double
  /// lon,经度数组,长度为len,数据类型double
  /// len,数据长度}
  /// @return json字符串 内容与上面json字符串内容一致
  ffi.Pointer<ffi.Char> smoothData(
    ffi.Pointer<ffi.Char> data,
    int len,
  ) {
    return _smoothData(
      data,
      len,
    );
  }

  late final _smoothDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('smoothData');
  late final _smoothData = _smoothDataPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  /// ------------------------------ 制作文件 ------------------------------
  /// /**
  ///  * @brief 图片压缩
  ///  * @param fileName 输入图片路径(包含文件名及后缀)
  ///  * @param endName 输出图片后缀名(.sport)
  ///  * @param format 图片格式
  ///  * @return:
  ///  *   SUCCESS(0) : 成功
  ///  *
  ///  * format图片格式详情
  ///  * {
  ///  *  #define FONT_FORMAT_ALPHA_MASK		(1 << 7)
  ///  *   #define FONT_FORMAT_SWAP_COLOR		(1 << 6)
  ///  *
  ///  *  #define FONT_FORMAT_NONE		0	//无效
  ///  *  #define FONT_FORMAT_RGB111		1
  ///  *  #define FONT_FORMAT_BGR111		(FONT_FORMAT_RGB111 | FONT_FORMAT_SWAP_COLOR)
  ///  *  #define FONT_FORMAT_ARGB111		(FONT_FORMAT_RGB111 | FONT_FORMAT_ALPHA_MASK)
  ///  *  #define FONT_FORMAT_ABGR111		(FONT_FORMAT_BGR111 | FONT_FORMAT_ALPHA_MASK)
  ///  *
  ///  *  #define FONT_FORMAT_RGB222		2
  ///  *  #define FONT_FORMAT_BGR222		(FONT_FORMAT_RGB222 | FONT_FORMAT_SWAP_COLOR)
  ///  *  #define FONT_FORMAT_ARGB222		(FONT_FORMAT_RGB222 | FONT_FORMAT_ALPHA_MASK)
  ///  *  #define FONT_FORMAT_ABGR222		(FONT_FORMAT_BGR222 | FONT_FORMAT_ALPHA_MASK)
  ///  *
  ///  *  #define FONT_FORMAT_RGB565		5
  ///  *  #define FONT_FORMAT_BGR565		(FONT_FORMAT_RGB565 | FONT_FORMAT_SWAP_COLOR)
  ///  *  #define FONT_FORMAT_ARGB565		(FONT_FORMAT_RGB565 | FONT_FORMAT_ALPHA_MASK)
  ///  *  #define FONT_FORMAT_ABGR565		(FONT_FORMAT_BGR565 | FONT_FORMAT_ALPHA_MASK)
  ///  *
  ///  *  #define FONT_FORMAT_RGB888		8
  ///  *  #define FONT_FORAMT_BGR888		(FONT_FORMAT_RGB888 | FONT_FORMAT_SWAP_COLOR)
  ///  *  #define FONT_FORMAT_ARGB888		(FONT_FORMAT_RGB888 | FONT_FORMAT_ALPHA_MASK)
  ///  *  #define FONT_FORAMT_ABGR888		(FONT_FORAMT_BGR888 | FONT_FORMAT_ALPHA_MASK)
  ///  *
  ///  *  #define FONT_FORMAT_MONO1		100 //单色 1bit
  ///  *  #define FONT_FORMAT_MONO2		101 //单色 2bit
  ///  *  #define FONT_FORMAT_MONO4		102 //单色 4bit
  ///  *  #define FONT_FORMAT_MONO8		103 //单色 8bit
  ///  *  #define FONT_FORMAT_AUTO		0xff//自动模式,如果是8bit图片,采用4bit取模,或者采用rgb,或者rgba取模
  ///  * }
  ///  *
  ///  */
  int makeFileCompression(
    ffi.Pointer<ffi.Char> fileName,
    ffi.Pointer<ffi.Char> endName,
    int format,
  ) {
    return _makeFileCompression(
      fileName,
      endName,
      format,
    );
  }

  late final _makeFileCompressionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('makeFileCompression');
  late final _makeFileCompression = _makeFileCompressionPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  /// @brief 制作压缩多张运动图片
  /// @param fileName 输入图片路径(包含文件名及后缀)
  /// @param endName 输出图片后缀名(.sports)
  /// @param format 图片格式
  /// @param pic_num 图片个数
  /// @return:
  /// SUCCESS(0) : 成功
  ///
  /// format图片格式详情
  /// {
  /// #define FONT_FORMAT_ALPHA_MASK		(1 << 7)
  /// #define FONT_FORMAT_SWAP_COLOR		(1 << 6)
  ///
  /// #define FONT_FORMAT_NONE		0	//无效
  /// #define FONT_FORMAT_RGB111		1
  /// #define FONT_FORMAT_BGR111		(FONT_FORMAT_RGB111 | FONT_FORMAT_SWAP_COLOR)
  /// #define FONT_FORMAT_ARGB111		(FONT_FORMAT_RGB111 | FONT_FORMAT_ALPHA_MASK)
  /// #define FONT_FORMAT_ABGR111		(FONT_FORMAT_BGR111 | FONT_FORMAT_ALPHA_MASK)
  ///
  /// #define FONT_FORMAT_RGB222		2
  /// #define FONT_FORMAT_BGR222		(FONT_FORMAT_RGB222 | FONT_FORMAT_SWAP_COLOR)
  /// #define FONT_FORMAT_ARGB222		(FONT_FORMAT_RGB222 | FONT_FORMAT_ALPHA_MASK)
  /// #define FONT_FORMAT_ABGR222		(FONT_FORMAT_BGR222 | FONT_FORMAT_ALPHA_MASK)
  ///
  /// #define FONT_FORMAT_RGB565		5
  /// #define FONT_FORMAT_BGR565		(FONT_FORMAT_RGB565 | FONT_FORMAT_SWAP_COLOR)
  /// #define FONT_FORMAT_ARGB565		(FONT_FORMAT_RGB565 | FONT_FORMAT_ALPHA_MASK)
  /// #define FONT_FORMAT_ABGR565		(FONT_FORMAT_BGR565 | FONT_FORMAT_ALPHA_MASK)
  ///
  /// #define FONT_FORMAT_RGB888		8
  /// #define FONT_FORAMT_BGR888		(FONT_FORMAT_RGB888 | FONT_FORMAT_SWAP_COLOR)
  /// #define FONT_FORMAT_ARGB888		(FONT_FORMAT_RGB888 | FONT_FORMAT_ALPHA_MASK)
  /// #define FONT_FORAMT_ABGR888		(FONT_FORAMT_BGR888 | FONT_FORMAT_ALPHA_MASK)
  ///
  /// #define FONT_FORMAT_MONO1		100 //单色 1bit
  /// #define FONT_FORMAT_MONO2		101 //单色 2bit
  /// #define FONT_FORMAT_MONO4		102 //单色 4bit
  /// #define FONT_FORMAT_MONO8		103 //单色 8bit
  /// #define FONT_FORMAT_AUTO		0xff//自动模式,如果是8bit图片,采用4bit取模,或者采用rgb,或者rgba取模
  /// }
  int makeSportFileCompression(
    ffi.Pointer<ffi.Char> fileName,
    ffi.Pointer<ffi.Char> endName,
    int format,
    int pic_num,
  ) {
    return _makeSportFileCompression(
      fileName,
      endName,
      format,
      pic_num,
    );
  }

  late final _makeSportFileCompressionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, ffi.Int)>>('makeSportFileCompression');
  late final _makeSportFileCompression =
      _makeSportFileCompressionPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, int)>();

  /// @brief 制作(IWF)文件 根据表盘包获取到IWF文件且返回生成的iwf文件大小
  /// @param file_path 素材路径
  /// @param save_file_name 文件名
  /// @param format 取模图片的格式
  /// @return:{1失败,IWF文件大小 成功}
  int mkWatchDialFile(
    ffi.Pointer<ffi.Char> file_path,
    ffi.Pointer<ffi.Char> save_file_name,
    int format,
  ) {
    return _mkWatchDialFile(
      file_path,
      save_file_name,
      format,
    );
  }

  late final _mkWatchDialFilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('mkWatchDialFile');
  late final _mkWatchDialFile = _mkWatchDialFilePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  /// @brief:制作表盘压缩文件(iwf.lz) 压缩文件会自动添加文件名.lz后缀
  /// @param file_path 素材路径
  /// @param save_file_name 文件名
  /// @param format 取模图片的格式
  /// {
  /// #define FONT_FORMAT_ALPHA_MASK		(1 << 7)
  /// #define FONT_FORMAT_SWAP_COLOR		(1 << 6)
  ///
  /// #define FONT_FORMAT_NONE		0	//无效
  /// #define FONT_FORMAT_RGB111		1
  /// #define FONT_FORMAT_BGR111		(FONT_FORMAT_RGB111 | FONT_FORMAT_SWAP_COLOR)
  /// #define FONT_FORMAT_ARGB111		(FONT_FORMAT_RGB111 | FONT_FORMAT_ALPHA_MASK)
  /// #define FONT_FORMAT_ABGR111		(FONT_FORMAT_BGR111 | FONT_FORMAT_ALPHA_MASK)
  ///
  /// #define FONT_FORMAT_RGB222		2
  /// #define FONT_FORMAT_BGR222		(FONT_FORMAT_RGB222 | FONT_FORMAT_SWAP_COLOR)
  /// #define FONT_FORMAT_ARGB222		(FONT_FORMAT_RGB222 | FONT_FORMAT_ALPHA_MASK)
  /// #define FONT_FORMAT_ABGR222		(FONT_FORMAT_BGR222 | FONT_FORMAT_ALPHA_MASK)
  ///
  /// #define FONT_FORMAT_RGB565		5
  /// #define FONT_FORMAT_BGR565		(FONT_FORMAT_RGB565 | FONT_FORMAT_SWAP_COLOR)
  /// #define FONT_FORMAT_ARGB565		(FONT_FORMAT_RGB565 | FONT_FORMAT_ALPHA_MASK)
  /// #define FONT_FORMAT_ABGR565		(FONT_FORMAT_BGR565 | FONT_FORMAT_ALPHA_MASK)
  ///
  /// #define FONT_FORMAT_RGB888		8
  /// #define FONT_FORAMT_BGR888		(FONT_FORMAT_RGB888 | FONT_FORMAT_SWAP_COLOR)
  /// #define FONT_FORMAT_ARGB888		(FONT_FORMAT_RGB888 | FONT_FORMAT_ALPHA_MASK)
  /// #define FONT_FORAMT_ABGR888		(FONT_FORAMT_BGR888 | FONT_FORMAT_ALPHA_MASK)
  ///
  /// #define FONT_FORMAT_MONO1		100 //单色 1bit
  /// #define FONT_FORMAT_MONO2		101 //单色 2bit
  /// #define FONT_FORMAT_MONO4		102 //单色 4bit
  /// #define FONT_FORMAT_MONO8		103 //单色 8bit
  /// #define FONT_FORMAT_AUTO		0xff//自动模式,如果是8bit图片,采用4bit取模,或者采用rgb,或者rgba取模
  /// }
  /// @param block_size 压缩块大小{1024,4096}
  /// @return:SUCCESS(0)成功,ERROR_NULL(14)文件路径打开失败
  int mkWatchDialFileCompression(
    ffi.Pointer<ffi.Char> file_path,
    ffi.Pointer<ffi.Char> save_file_name,
    int format,
    int block_size,
  ) {
    return _mkWatchDialFileCompression(
      file_path,
      save_file_name,
      format,
      block_size,
    );
  }

  late final _mkWatchDialFileCompressionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int, ffi.Int)>>('mkWatchDialFileCompression');
  late final _mkWatchDialFileCompression =
      _mkWatchDialFileCompressionPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, int)>();

  /// @brief 制作(EPO.DAT/.pgl)文件
  /// @param file_path 素材路径
  /// @param save_file_name 输出文件名,一般为EPO.DAT/.pgl
  /// @param file_count 需要合并的文件个数，如果跟实际文件夹内个数不一致就报错,错误码ERROR_INVALID_PARAM(7)
  /// @return SUCCESS(0),成功,ERROR_INVALID_PARAM(7),EPO文件过期ERROR_INVAILD_FILE (27)
  int mkEpoFile(
    ffi.Pointer<ffi.Char> file_path,
    ffi.Pointer<ffi.Char> save_file_name,
    int file_count,
  ) {
    return _mkEpoFile(
      file_path,
      save_file_name,
      file_count,
    );
  }

  late final _mkEpoFilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('mkEpoFile');
  late final _mkEpoFile = _mkEpoFilePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  /// @brief 图片转换格式 png->bmp
  /// @param inname 用于转换的png路径(包含文件名及后缀)
  /// @param outname 转换完的bmp路径(包含文件名及后缀)
  /// @param format 转换成bmp的文件格式
  /// {8:RGB888, 5:ARGB555}
  /// @return:
  /// SUCCESS(0) : 成功
  int Png2Bmp(
    ffi.Pointer<ffi.Char> inname,
    ffi.Pointer<ffi.Char> outname,
    int format,
  ) {
    return _Png2Bmp(
      inname,
      outname,
      format,
    );
  }

  late final _Png2BmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('Png2Bmp');
  late final _Png2Bmp = _Png2BmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  /// @brief PNG图片32/24位转16位
  /// @param inname 用于转换的png路径(包含文件名及后缀)
  /// @param outname 转换完的png路径(包含文件名及后缀)
  /// @return:
  /// SUCCESS(0) : 成功
  int PngConvert16bit(
    ffi.Pointer<ffi.Char> inname,
    ffi.Pointer<ffi.Char> outname,
  ) {
    return _PngConvert16bit(
      inname,
      outname,
    );
  }

  late final _PngConvert16bitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('PngConvert16bit');
  late final _PngConvert16bit = _PngConvert16bitPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// @brief 制作壁纸图片文件
  /// @param file_path 素材路径
  /// @param save_file_path 输出文件名
  /// @param format 预留
  /// @return:
  /// SUCCESS(0) : 成功
  int mkPhotoFile(
    ffi.Pointer<ffi.Char> file_path,
    ffi.Pointer<ffi.Char> save_file_path,
    int format,
  ) {
    return _mkPhotoFile(
      file_path,
      save_file_path,
      format,
    );
  }

  late final _mkPhotoFilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('mkPhotoFile');
  late final _mkPhotoFile = _mkPhotoFilePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  /// @brief 制作联系人文件 v2_conta.ml
  /// @param jsondata json数据
  /// {
  /// 当前文件保存的年 ：year , month , day , hour , minute , second
  /// 联系人详情个数     ：contact_item_num
  /// 联系人详情            ：items
  /// 联系人详情姓名     ：name
  /// 纤细人详情号码     ：phone
  /// }
  /// @return 成功：生成的联系人文件路径(持久化路径目录+v2_conta.ml) 失败：NULL / 字符串 file_is_null
  ffi.Pointer<ffi.Char> mkConnactFile(
    ffi.Pointer<ffi.Char> jsondata,
  ) {
    return _mkConnactFile(
      jsondata,
    );
  }

  late final _mkConnactFilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('mkConnactFile');
  late final _mkConnactFile = _mkConnactFilePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  /// @brief 制作思澈表盘文件,会在输入路径下生成(.watch)表盘文件
  /// @param file_path 素材文件路径
  /// @return 0成功 非0失败 -1: 没有控件 -2: json文件加载失败
  int mkSifliDialFile(
    ffi.Pointer<ffi.Char> file_path,
  ) {
    return _mkSifliDialFile(
      file_path,
    );
  }

  late final _mkSifliDialFilePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'mkSifliDialFile');
  late final _mkSifliDialFile =
      _mkSifliDialFilePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief 获取思澈表盘(.watch)文件占用空间大小，计算规则：
  /// nor方案：对表盘所有文件以4096向上取整  -98平台对应的项目，IDW27,205G Pro,IDW28,IDS05，DR03等
  /// nand方案：对表盘所有文件以2048向上取整 -99平台对应的项目，GTX12,GTX13,GTR1,TIT21
  /// @param file_path .watch文件路径，包含文件名
  /// @param platform 平台类型，目前有98(nor)，99(nand)平台
  /// @return size 文件占用磁盘的实际大小，-1:失败，文件路径访问失败，-2:失败，申请内存失败，-3:失败，读取文件失败，-4:失败，输入平台类型不支持
  int getSifliDialSize(
    ffi.Pointer<ffi.Char> file_path,
    int platform,
  ) {
    return _getSifliDialSize(
      file_path,
      platform,
    );
  }

  late final _getSifliDialSizePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'getSifliDialSize');
  late final _getSifliDialSize = _getSifliDialSizePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  /// @brief 压缩png图片质量
  /// @param inputFilePath   输入文件路径
  /// @param outputFilePath 输出文件路径
  /// @return int 成功 SUCCESS
  int compressToPNG(
    ffi.Pointer<ffi.Char> inputFilePath,
    ffi.Pointer<ffi.Char> outputFilePath,
  ) {
    return _compressToPNG(
      inputFilePath,
      outputFilePath,
    );
  }

  late final _compressToPNGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('compressToPNG');
  late final _compressToPNG = _compressToPNGPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// @brief jpg转png
  /// @param inputFilePath   输入文件路径
  /// @param outputFilePath 输出文件路径
  /// @return int 0 成功, 1 已经是png，其它失败
  int jpgToPNG(
    ffi.Pointer<ffi.Char> inputFilePath,
    ffi.Pointer<ffi.Char> outputFilePath,
  ) {
    return _jpgToPNG(
      inputFilePath,
      outputFilePath,
    );
  }

  late final _jpgToPNGPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('jpgToPNG');
  late final _jpgToPNG = _jpgToPNGPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// @brief mp3音频文件采样率转换  将采样率转化为44.1khz
  /// @param in_path   音频输入文件路径 目录及文件名、文件名后缀
  /// @param out_path 音频输出文件路径 目录及文件名、文件名后缀
  /// @param in_size   音频输入文件大小
  /// @return:
  /// SUCCESS(0) : 成功
  int AudioSamplingRateConversion(
    ffi.Pointer<ffi.Char> in_path,
    ffi.Pointer<ffi.Char> out_path,
    int in_size,
  ) {
    return _AudioSamplingRateConversion(
      in_path,
      out_path,
      in_size,
    );
  }

  late final _AudioSamplingRateConversionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('AudioSamplingRateConversion');
  late final _AudioSamplingRateConversion =
      _AudioSamplingRateConversionPtr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  /// @brief pcm音频文件转换指定采样率
  /// @param confi_path  采样率转换配置文件的路径包括文件名
  /// @param output_dir_path 采样率转换后的目标文件夹路径
  /// @return:
  /// SUCCESS(0) : 成功
  int PcmFileSamplingRateConversion(
    ffi.Pointer<ffi.Char> confi_path,
    ffi.Pointer<ffi.Char> output_dir_path,
  ) {
    return _PcmFileSamplingRateConversion(
      confi_path,
      output_dir_path,
    );
  }

  late final _PcmFileSamplingRateConversionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('PcmFileSamplingRateConversion');
  late final _PcmFileSamplingRateConversion = _PcmFileSamplingRateConversionPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// @brief 音频文件格式转换 mp3转pcm
  /// @param in_path   音频输入文件路径 目录及文件名、文件名后缀(.mp3)
  /// @param out_path 音频输出文件路径 目录及文件名、文件名后缀(.pcm)
  /// @return:
  /// SUCCESS(0) : 成功
  int AudioFormatConversionMp32Pcm(
    ffi.Pointer<ffi.Char> in_path,
    ffi.Pointer<ffi.Char> out_path,
  ) {
    return _AudioFormatConversionMp32Pcm(
      in_path,
      out_path,
    );
  }

  late final _AudioFormatConversionMp32PcmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('AudioFormatConversionMp32Pcm');
  late final _AudioFormatConversionMp32Pcm = _AudioFormatConversionMp32PcmPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// @brief 音频文件格式转换 mp3转pcm进度注册函数
  /// @return:
  /// SUCCESS(0) : 成功
  int AudioFormatConversionMp32PcmProgressReg(
    protocol_report_progress_cb_handle func,
  ) {
    return _AudioFormatConversionMp32PcmProgressReg(
      func,
    );
  }

  late final _AudioFormatConversionMp32PcmProgressRegPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(protocol_report_progress_cb_handle)>>(
      'AudioFormatConversionMp32PcmProgressReg');
  late final _AudioFormatConversionMp32PcmProgressReg =
      _AudioFormatConversionMp32PcmProgressRegPtr.asFunction<
          int Function(protocol_report_progress_cb_handle)>();

  /// @brief 音频文件格式转换 mp3转pcm完成注册函数
  /// @return:
  /// SUCCESS(0) : 成功
  int AudioFormatConversionMp32PcmCompleteReg(
    protocol_report_complete_cb_handle func,
  ) {
    return _AudioFormatConversionMp32PcmCompleteReg(
      func,
    );
  }

  late final _AudioFormatConversionMp32PcmCompleteRegPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(protocol_report_complete_cb_handle)>>(
      'AudioFormatConversionMp32PcmCompleteReg');
  late final _AudioFormatConversionMp32PcmCompleteReg =
      _AudioFormatConversionMp32PcmCompleteRegPtr.asFunction<
          int Function(protocol_report_complete_cb_handle)>();

  /// @brief 音频采样率转换完成回调注册
  /// @param func 函数指针
  /// @return SUCCESS(0)成功
  int AudioSRConversionCompletCallbackReg(
    mp3tomp3_complete_cb_handle func,
  ) {
    return _AudioSRConversionCompletCallbackReg(
      func,
    );
  }

  late final _AudioSRConversionCompletCallbackRegPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(mp3tomp3_complete_cb_handle)>>(
      'AudioSRConversionCompletCallbackReg');
  late final _AudioSRConversionCompletCallbackReg =
      _AudioSRConversionCompletCallbackRegPtr.asFunction<
          int Function(mp3tomp3_complete_cb_handle)>();

  /// @brief 音频采样率转换进度回调注册
  /// @param func 函数指针
  /// @return SUCCESS(0)成功
  int AudioSRConversionProgressCallbackReg(
    protocol_report_progress_cb_handle func,
  ) {
    return _AudioSRConversionProgressCallbackReg(
      func,
    );
  }

  late final _AudioSRConversionProgressCallbackRegPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(protocol_report_progress_cb_handle)>>(
      'AudioSRConversionProgressCallbackReg');
  late final _AudioSRConversionProgressCallbackReg =
      _AudioSRConversionProgressCallbackRegPtr.asFunction<
          int Function(protocol_report_progress_cb_handle)>();

  /// @brief 获取mp3音频采样率
  /// @param in_path 输入带路径MP3文件名
  /// @return int 输入MP3文件的采样率
  int AduioGetMp3SamplingRate(
    ffi.Pointer<ffi.Char> in_path,
  ) {
    return _AduioGetMp3SamplingRate(
      in_path,
    );
  }

  late final _AduioGetMp3SamplingRatePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'AduioGetMp3SamplingRate');
  late final _AduioGetMp3SamplingRate = _AduioGetMp3SamplingRatePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>)>();

  /// ------------------------------ 工具接口 ------------------------------
  /// /**
  ///  * @brief 制作功能表信息文件
  ///  * @param path 输出文件路径(包含文件名及后缀)
  ///  * @return:
  ///  *   SUCCESS(0) : 成功
  ///  */
  int funcTableOutputOnJsonFile(
    ffi.Pointer<ffi.Char> path,
  ) {
    return _funcTableOutputOnJsonFile(
      path,
    );
  }

  late final _funcTableOutputOnJsonFilePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'funcTableOutputOnJsonFile');
  late final _funcTableOutputOnJsonFile = _funcTableOutputOnJsonFilePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// @brief 模拟器回应数据解释，传入key`replyinfo`，输出对应的字节数据
  /// @param json_data 素材JSON数据，对应事件号的`replyinfo`
  /// @param json_data_len 素材JSON数据长度
  /// @param evt 事件号
  /// @return JSON字符串，转换后的字节数据用JSON格式返回
  ffi.Pointer<ffi.Char> simulatorRespondInfoExec(
    ffi.Pointer<ffi.Char> json_data,
    int json_data_len,
    int evt,
  ) {
    return _simulatorRespondInfoExec(
      json_data,
      json_data_len,
      evt,
    );
  }

  late final _simulatorRespondInfoExecPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('simulatorRespondInfoExec');
  late final _simulatorRespondInfoExec =
      _simulatorRespondInfoExecPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int, int)>();

  /// @brief 模拟器收到APP的字节数据，解释成对应的json内容输出
  /// @param data 素材字节数据
  /// @param data_len 字节数据长度
  /// @return 输出json数据字符串
  ffi.Pointer<ffi.Char> simulatorReceiveBinary2Json(
    ffi.Pointer<ffi.Char> data,
    int data_len,
  ) {
    return _simulatorReceiveBinary2Json(
      data,
      data_len,
    );
  }

  late final _simulatorReceiveBinary2JsonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('simulatorReceiveBinary2Json');
  late final _simulatorReceiveBinary2Json = _simulatorReceiveBinary2JsonPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  /// @brief 计算长包指令的校验码
  /// @param data 素材字节数据
  /// @param data_len 字节数据长度
  /// @return 输出2个字节的CRC校验码
  int getCrc16(
    ffi.Pointer<ffi.Char> data,
    int data_len,
  ) {
    return _getCrc16(
      data,
      data_len,
    );
  }

  late final _getCrc16Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'getCrc16');
  late final _getCrc16 =
      _getCrc16Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  /// @brief 获取是否支持断点续传的功能表
  /// @return 0不支持 1支持
  int getIsSupportTranContinue() {
    return _getIsSupportTranContinue();
  }

  late final _getIsSupportTranContinuePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'getIsSupportTranContinue');
  late final _getIsSupportTranContinue =
      _getIsSupportTranContinuePtr.asFunction<int Function()>();

  /// ------------------------------ v2消息/来电提醒 ------------------------------
  /// /**
  ///  * @brief v2发送来电提醒以及来电电话号码和来电联系人(部分设备实现)
  ///  * @param contactText 联系人名称
  ///  * @param phoneNumber 号码
  ///  * @return SUCCESS(0) 成功
  ///  * */
  int ProtocolV2SetCallEvt(
    ffi.Pointer<ffi.Char> contactText,
    ffi.Pointer<ffi.Char> phoneNumber,
  ) {
    return _ProtocolV2SetCallEvt(
      contactText,
      phoneNumber,
    );
  }

  late final _ProtocolV2SetCallEvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('ProtocolV2SetCallEvt');
  late final _ProtocolV2SetCallEvt = _ProtocolV2SetCallEvtPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// @brief v2发送信息提醒以及信息内容(部分设备实现)
  /// @param type 信息类型
  /// {
  /// TYPE_SMS = 0x01
  /// TYPE_EMAIL = 0x02
  /// TYPE_WX = 0x03
  /// TYPE_QQ = 0x04
  /// TYPE_WEIBO = 0x05
  /// TYPE_FACEBOOK = 0x06
  /// TYPE_TWITTER = 0x07
  /// TYPE_WHATSAPP = 0x08
  /// TYPE_MESSENGER = 0x09
  /// TYPE_INSTAGRAM = 0x0A
  /// TYPE_LINKEDIN = 0x0B
  /// TYPE_CALENDAR = 0x0C
  /// TYPE_SKYPE = 0x0D
  /// TYPE_ALARM = 0x0E
  /// TYPE_VKONTAKTE = 0x10
  /// TYPE_LINE = 0x11
  /// TYPE_VIBER = 0x12
  /// TYPE_KAKAO_TALK = 0x13
  /// TYPE_GMAIL = 0x14
  /// TYPE_OUTLOOK = 0x15
  /// TYPE_SNAPCHAT = 0x16
  /// TYPE_TELEGRAM = 0x17
  /// TYPE_CHATWORK = 0x20
  /// TYPE_SLACK = 0x21
  /// TYPE_TUMBLR = 0x23
  /// TYPE_YOUTUBE = 0x24
  /// TYPE_PINTEREST_YAHOO = 0x25
  /// TYPE_TIKTOK = 0x26
  /// TYPE_REDBUS = 0X27
  /// TYPE_DAILYHUNT= 0X28
  /// TYPE_HOTSTAR = 0X29
  /// TYPE_INSHORTS = 0X2A
  /// TYPE_PAYTM = 0X2B
  /// TYPE_AMAZON = 0X2C
  /// TYPE_FLIPKART = 0X2D
  /// TYPE_PRIME = 0X2E
  /// TYPE_NETFLIX = 0X2F
  /// TYPE_GPAY = 0X30
  /// TYPE_PHONPE = 0X31
  /// TYPE_SWIGGY = 0X32
  /// TYPE_ZOMATO = 0X33
  /// TYPE_MAKEMYTRIP = 0X34
  /// TYPE_JIOTV = 0X35
  /// TYPE_KEEP = 0X36
  /// }
  /// @param contactText 通知内容
  /// @param phoneNumber 号码
  /// @return:SUCCESS(0)成功
  int ProtocolV2SetNoticeEvt(
    int type,
    ffi.Pointer<ffi.Char> contactText,
    ffi.Pointer<ffi.Char> phoneNumber,
    ffi.Pointer<ffi.Char> dataText,
  ) {
    return _ProtocolV2SetNoticeEvt(
      type,
      contactText,
      phoneNumber,
      dataText,
    );
  }

  late final _ProtocolV2SetNoticeEvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('ProtocolV2SetNoticeEvt');
  late final _ProtocolV2SetNoticeEvt = _ProtocolV2SetNoticeEvtPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  /// @brief v2发送来电提醒状态为来电已接, 告诉设备停止提醒用户(部分设备实现)
  /// @return SUCCESS(0)成功
  int ProtocolV2StopCallEvt() {
    return _ProtocolV2StopCallEvt();
  }

  late final _ProtocolV2StopCallEvtPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ProtocolV2StopCallEvt');
  late final _ProtocolV2StopCallEvt =
      _ProtocolV2StopCallEvtPtr.asFunction<int Function()>();

  /// @brief v2发送来电提醒状态为来电已拒, 告诉设备停止提醒用户(部分设备实现)
  /// @return SUCCESS(0)成功
  int ProtocolV2MissedCallEvt() {
    return _ProtocolV2MissedCallEvt();
  }

  late final _ProtocolV2MissedCallEvtPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'ProtocolV2MissedCallEvt');
  late final _ProtocolV2MissedCallEvt =
      _ProtocolV2MissedCallEvtPtr.asFunction<int Function()>();

  /// @brief 获取flash日志开始
  /// @param type 日志类型
  /// {PROTOCOL_FLASH_LOG_TYPE_GENERAL   =  0,    //通用log
  /// PROTOCOL_FLASH_LOG_TYPE_RESET             =  1,    //复位log
  /// PROTOCOL_FLASH_LOG_TYPE_ALGORITHM   =   2,    //算法
  /// PROTOCOL_FLASH_LOG_TYPE_HARDWARE    =   3,    //硬件
  /// PROTOCOL_FLASH_LOG_TYPE_REBOOT         =   4,    //重启log}
  /// @param file_name 文件路径 包括文件名及后缀
  /// @return int SUCCESS(0)成功  ERROR_BUSY(17)日志正在获取
  int ProtocolGetFlashLogStart(
    int type,
    ffi.Pointer<ffi.Char> file_name,
  ) {
    return _ProtocolGetFlashLogStart(
      type,
      file_name,
    );
  }

  late final _ProtocolGetFlashLogStartPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'ProtocolGetFlashLogStart');
  late final _ProtocolGetFlashLogStart = _ProtocolGetFlashLogStartPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  /// @brief 设置flash获取时间，单位秒，默认一分钟
  /// @return int SUCCESS(0)成功
  int ProtocolGetFlashLogSetTime(
    int time,
  ) {
    return _ProtocolGetFlashLogSetTime(
      time,
    );
  }

  late final _ProtocolGetFlashLogSetTimePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'ProtocolGetFlashLogSetTime');
  late final _ProtocolGetFlashLogSetTime =
      _ProtocolGetFlashLogSetTimePtr.asFunction<int Function(int)>();

  /// @brief 获取flash日志停止
  /// @return int SUCCESS(0)成功
  int ProtocolGetFlashLogStop() {
    return _ProtocolGetFlashLogStop();
  }

  late final _ProtocolGetFlashLogStopPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'ProtocolGetFlashLogStop');
  late final _ProtocolGetFlashLogStop =
      _ProtocolGetFlashLogStopPtr.asFunction<int Function()>();

  /// @brief 获取电池日志信息
  /// @return int SUCCESS(0)成功
  int ProtocolGetBatteryLogInfo() {
    return _ProtocolGetBatteryLogInfo();
  }

  late final _ProtocolGetBatteryLogInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'ProtocolGetBatteryLogInfo');
  late final _ProtocolGetBatteryLogInfo =
      _ProtocolGetBatteryLogInfoPtr.asFunction<int Function()>();

  /// @brief 获取过热日志信息
  /// @return int SUCCESS(0)成功
  int ProtocolGetHeatLogInfo() {
    return _ProtocolGetHeatLogInfo();
  }

  late final _ProtocolGetHeatLogInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ProtocolGetHeatLogInfo');
  late final _ProtocolGetHeatLogInfo =
      _ProtocolGetHeatLogInfoPtr.asFunction<int Function()>();

  /// @brief:获取flashlog进度回调注册
  /// @param func 函数指针
  /// @return:SUCCESS(0)成功
  int FlashLogTranProgressCallbackReg(
    protocol_report_progress_cb_handle func,
  ) {
    return _FlashLogTranProgressCallbackReg(
      func,
    );
  }

  late final _FlashLogTranProgressCallbackRegPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(protocol_report_progress_cb_handle)>>(
      'FlashLogTranProgressCallbackReg');
  late final _FlashLogTranProgressCallbackReg =
      _FlashLogTranProgressCallbackRegPtr.asFunction<
          int Function(protocol_report_progress_cb_handle)>();

  /// @brief 获取flashlog完成回调注册
  /// @param func 函数指针
  /// @return SUCCESS(0)成功
  int FlashLogTranCompletCallbackReg(
    protocol_flash_log_tran_complete_cb_handle func,
  ) {
    return _FlashLogTranCompletCallbackReg(
      func,
    );
  }

  late final _FlashLogTranCompletCallbackRegPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(protocol_flash_log_tran_complete_cb_handle)>>(
      'FlashLogTranCompletCallbackReg');
  late final _FlashLogTranCompletCallbackReg =
      _FlashLogTranCompletCallbackRegPtr.asFunction<
          int Function(protocol_flash_log_tran_complete_cb_handle)>();

  /// @brief 获取电池日志完成回调注册
  /// @param func 函数指针
  /// @return SUCCESS(0)成功
  int BatteryLogGetCompletCallbackReg(
    protocol_get_battery_log_info_complete_cb_handle func,
  ) {
    return _BatteryLogGetCompletCallbackReg(
      func,
    );
  }

  late final _BatteryLogGetCompletCallbackRegPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  protocol_get_battery_log_info_complete_cb_handle)>>(
      'BatteryLogGetCompletCallbackReg');
  late final _BatteryLogGetCompletCallbackReg =
      _BatteryLogGetCompletCallbackRegPtr.asFunction<
          int Function(protocol_get_battery_log_info_complete_cb_handle)>();

  /// @brief 获取过热日志完成回调注册
  /// @param func 函数指针
  /// @return SUCCESS(0)成功
  int HeatLogGetCompletCallbackReg(
    protocol_get_heat_log_info_complete_cb_handle func,
  ) {
    return _HeatLogGetCompletCallbackReg(
      func,
    );
  }

  late final _HeatLogGetCompletCallbackRegPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(protocol_get_heat_log_info_complete_cb_handle)>>(
      'HeatLogGetCompletCallbackReg');
  late final _HeatLogGetCompletCallbackReg =
      _HeatLogGetCompletCallbackRegPtr.asFunction<
          int Function(protocol_get_heat_log_info_complete_cb_handle)>();

  /// 注册函数接口 ********************************/
  /// /**
  /// @brief 解析完固件返回的二进制数据,打包成json数据回调给SDK
  /// @return SUCCESS(0),成功
  int JsonDataCallbackDataReg(
    protocol_json_cb_handle func,
  ) {
    return _JsonDataCallbackDataReg(
      func,
    );
  }

  late final _JsonDataCallbackDataRegPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(protocol_json_cb_handle)>>(
          'JsonDataCallbackDataReg');
  late final _JsonDataCallbackDataReg = _JsonDataCallbackDataRegPtr.asFunction<
      int Function(protocol_json_cb_handle)>();

  /// @brief 解析完固件返回的v3同步健康数据二进制数据,打包成json数据回调给SDK
  /// @return SUCCESS(0),成功
  int V3SyncHealthJsonDataCbReg(
    protocol_json_cb_handle func,
  ) {
    return _V3SyncHealthJsonDataCbReg(
      func,
    );
  }

  late final _V3SyncHealthJsonDataCbRegPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(protocol_json_cb_handle)>>(
          'V3SyncHealthJsonDataCbReg');
  late final _V3SyncHealthJsonDataCbReg = _V3SyncHealthJsonDataCbRegPtr
      .asFunction<int Function(protocol_json_cb_handle)>();

  /// @brief c库通知app事件回调注册
  /// @return SUCCESS(0),成功
  int ProtocolNoticeCallbackReg(
    protocol_notice_cb_handle func,
  ) {
    return _ProtocolNoticeCallbackReg(
      func,
    );
  }

  late final _ProtocolNoticeCallbackRegPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(protocol_notice_cb_handle)>>(
          'ProtocolNoticeCallbackReg');
  late final _ProtocolNoticeCallbackReg = _ProtocolNoticeCallbackRegPtr
      .asFunction<int Function(protocol_notice_cb_handle)>();

  /// @brief 文件传输完成事件回调注册
  /// @param func 函数指针
  /// @return SUCCESS(0)成功
  int DataTranCompleteCallbackReg(
    data_tran_complete_cb_handle func,
  ) {
    return _DataTranCompleteCallbackReg(
      func,
    );
  }

  late final _DataTranCompleteCallbackRegPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(data_tran_complete_cb_handle)>>(
      'DataTranCompleteCallbackReg');
  late final _DataTranCompleteCallbackReg = _DataTranCompleteCallbackRegPtr
      .asFunction<int Function(data_tran_complete_cb_handle)>();

  /// @brief 文件传输进度事件回调注册
  /// @param func 函数指针
  /// @return SUCCESS(0)成功
  int DataTranProgressCallbackReg(
    data_tran_progress_cb_handle func,
  ) {
    return _DataTranProgressCallbackReg(
      func,
    );
  }

  late final _DataTranProgressCallbackRegPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(data_tran_progress_cb_handle)>>(
      'DataTranProgressCallbackReg');
  late final _DataTranProgressCallbackReg = _DataTranProgressCallbackRegPtr
      .asFunction<int Function(data_tran_progress_cb_handle)>();

  /// @brief:SPP文件传输完成事件回调注册
  /// @param func 函数指针
  /// @return:SUCCESS(0)成功
  int SppDataTranCompleteCallbackReg(
    data_tran_complete_cb_handle func,
  ) {
    return _SppDataTranCompleteCallbackReg(
      func,
    );
  }

  late final _SppDataTranCompleteCallbackRegPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(data_tran_complete_cb_handle)>>(
      'SppDataTranCompleteCallbackReg');
  late final _SppDataTranCompleteCallbackReg =
      _SppDataTranCompleteCallbackRegPtr.asFunction<
          int Function(data_tran_complete_cb_handle)>();

  /// @brief:SPP文件传输进度事件回调注册
  /// @param func 函数指针
  /// @return:SUCCESS(0)成功
  int SppDataTranProgressCallbackReg(
    data_tran_progress_cb_handle func,
  ) {
    return _SppDataTranProgressCallbackReg(
      func,
    );
  }

  late final _SppDataTranProgressCallbackRegPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(data_tran_progress_cb_handle)>>(
      'SppDataTranProgressCallbackReg');
  late final _SppDataTranProgressCallbackReg =
      _SppDataTranProgressCallbackRegPtr.asFunction<
          int Function(data_tran_progress_cb_handle)>();

  /// @brief:设备传输文件到APP的传输完成事件回调注册
  /// @param func 函数指针
  /// @return:SUCCESS(0)成功
  int Device2AppDataTranCompleteCallbackReg(
    protocol_report_complete_cb_handle func,
  ) {
    return _Device2AppDataTranCompleteCallbackReg(
      func,
    );
  }

  late final _Device2AppDataTranCompleteCallbackRegPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(protocol_report_complete_cb_handle)>>(
      'Device2AppDataTranCompleteCallbackReg');
  late final _Device2AppDataTranCompleteCallbackReg =
      _Device2AppDataTranCompleteCallbackRegPtr.asFunction<
          int Function(protocol_report_complete_cb_handle)>();

  /// @brief:设备传输文件到APP的传输进度事件回调注册
  /// @param func 函数指针
  /// @return:SUCCESS(0)成功
  int Device2AppDataTranProgressCallbackReg(
    protocol_report_progress_cb_handle func,
  ) {
    return _Device2AppDataTranProgressCallbackReg(
      func,
    );
  }

  late final _Device2AppDataTranProgressCallbackRegPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(protocol_report_progress_cb_handle)>>(
      'Device2AppDataTranProgressCallbackReg');
  late final _Device2AppDataTranProgressCallbackReg =
      _Device2AppDataTranProgressCallbackRegPtr.asFunction<
          int Function(protocol_report_progress_cb_handle)>();

  /// @brief:APP回复设备传输文件到APP的请求
  /// @param error_code 0回复握手成功 非0失败，拒绝传输
  /// @return:SUCCESS(0)成功
  int Device2AppDataTranRequestReply(
    int error_code,
  ) {
    return _Device2AppDataTranRequestReply(
      error_code,
    );
  }

  late final _Device2AppDataTranRequestReplyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'Device2AppDataTranRequestReply');
  late final _Device2AppDataTranRequestReply =
      _Device2AppDataTranRequestReplyPtr.asFunction<int Function(int)>();

  /// @brief:APP主动停止设备传输文件到APP
  /// @return:SUCCESS(0)成功
  int Device2AppDataTranManualStop() {
    return _Device2AppDataTranManualStop();
  }

  late final _Device2AppDataTranManualStopPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'Device2AppDataTranManualStop');
  late final _Device2AppDataTranManualStop =
      _Device2AppDataTranManualStopPtr.asFunction<int Function()>();

  /// @brief:设备传输文件到APP的传输请求事件回调注册
  /// json字符串内容:
  /// file_type 文件类型:
  /// typedef enum{
  /// DATA_TRAN_FILE_TYPE_UNKNOWN,           //无效
  /// DATA_TRAN_FILE_TYPE_FW,                //固件升级文件
  /// DATA_TRAN_FILE_TYPE_FZBIN,             //图片资源升级
  /// DATA_TYPE_FILE_TYPE_BIN,               //字库升级
  /// DATA_TYPE_FILE_TYPE_LANG,              //语言包
  /// DATA_TYPE_FILE_TYPE_BT,                //BT文件
  /// DATA_TYPE_FILE_TYPE_IWF,               //云表盘文件
  /// DATA_TYPE_FILE_TYPE_WALLPAPER,         //本地壁纸文件
  /// DATA_TYPE_FILE_TYPE_ML,                //通讯录文件
  /// DATA_TYPE_FILE_TYPE_UBX,               //AGPS文件
  /// DATA_TYPE_FILE_TYPE_GPS,               //GPS文件
  /// DATA_TYPE_FILE_TYPE_MP3,               //MP3文件
  /// DATA_TYPE_FILE_TYPE_MESSAGE,           //消息图标
  /// DATA_TYPE_FILE_TYPE_SPORT,             //运动图片 单图
  /// DATA_TYPE_FILE_TYPE_MOVE_SPORTS,       //运动图片 多图
  /// DATA_TYPE_FILE_TYPE_EPO,               //EPO文件
  /// DATA_TYPE_FILE_TYPE_TONE,              //提示音
  /// DATA_TYPE_FILE_TYPE_BP_CALIBRATE,      //血压校准文件
  /// DATA_TYPE_FILE_TYPE_BP_ALGORITHM,      //血压模型算法文件
  /// DATA_TYPE_FILE_TYPE_VOICE = 0x13       //语音备忘录文件
  /// }TRAN_FILE_TYPE;
  /// file_size 文件大小
  /// file_compression_type 文件压缩类型 0不压缩
  /// file_name 文件名称
  /// file_path 文件路径
  ///
  /// @param func 函数指针
  /// @return:SUCCESS(0)成功
  /// 备注：收到回调后，10s没有使用该方法dev_2_app_tran_request_reply回复设备，会结束传输
  int Device2AppDataTranRequestCallbackReg(
    protocol_report_json_cb_handle func,
  ) {
    return _Device2AppDataTranRequestCallbackReg(
      func,
    );
  }

  late final _Device2AppDataTranRequestCallbackRegPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(protocol_report_json_cb_handle)>>(
      'Device2AppDataTranRequestCallbackReg');
  late final _Device2AppDataTranRequestCallbackReg =
      _Device2AppDataTranRequestCallbackRegPtr.asFunction<
          int Function(protocol_report_json_cb_handle)>();

  /// @brief v3血压校准完成事件回调注册
  /// @param func 函数指针
  /// @return SUCCESS(0)成功
  int ProtocolV3BpCalCompleteCallbackReg(
    protocol_bp_cal_complete_cb_handle func,
  ) {
    return _ProtocolV3BpCalCompleteCallbackReg(
      func,
    );
  }

  late final _ProtocolV3BpCalCompleteCallbackRegPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(protocol_bp_cal_complete_cb_handle)>>(
      'ProtocolV3BpCalCompleteCallbackReg');
  late final _ProtocolV3BpCalCompleteCallbackReg =
      _ProtocolV3BpCalCompleteCallbackRegPtr.asFunction<
          int Function(protocol_bp_cal_complete_cb_handle)>();

  /// @brief 同步v3健康数据进度回调注册
  /// @param func 函数指针
  /// @return SUCCESS(0)成功
  int SyncV3HealthDataProgressCallbackReg(
    protocol_sync_v3_health_client_progress_cb_handle func,
  ) {
    return _SyncV3HealthDataProgressCallbackReg(
      func,
    );
  }

  late final _SyncV3HealthDataProgressCallbackRegPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  protocol_sync_v3_health_client_progress_cb_handle)>>(
      'SyncV3HealthDataProgressCallbackReg');
  late final _SyncV3HealthDataProgressCallbackReg =
      _SyncV3HealthDataProgressCallbackRegPtr.asFunction<
          int Function(protocol_sync_v3_health_client_progress_cb_handle)>();

  /// @brief 同步v3健康数据完成事件回调注册
  /// @param func 函数指针
  /// @return SUCCESS(0)成功
  int SyncV3HealthDataCompleteCallbackReg(
    protocol_sync_v3_health_client_complete_cb_handle func,
  ) {
    return _SyncV3HealthDataCompleteCallbackReg(
      func,
    );
  }

  late final _SyncV3HealthDataCompleteCallbackRegPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  protocol_sync_v3_health_client_complete_cb_handle)>>(
      'SyncV3HealthDataCompleteCallbackReg');
  late final _SyncV3HealthDataCompleteCallbackReg =
      _SyncV3HealthDataCompleteCallbackRegPtr.asFunction<
          int Function(protocol_sync_v3_health_client_complete_cb_handle)>();

  /// @brief 同步v3健康数据项完成事件回调注册(指的是每一种类型的健康数据收集完成后都会通过回调上报SDK)
  /// @param func 函数指针
  /// @return SUCCESS(0)成功
  int SyncV3HealthDataOneNoticeCompleteCbReg(
    protocol_sync_v3_health_client_one_notice_complete_cb_handle func,
  ) {
    return _SyncV3HealthDataOneNoticeCompleteCbReg(
      func,
    );
  }

  late final _SyncV3HealthDataOneNoticeCompleteCbRegPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  protocol_sync_v3_health_client_one_notice_complete_cb_handle)>>(
      'SyncV3HealthDataOneNoticeCompleteCbReg');
  late final _SyncV3HealthDataOneNoticeCompleteCbReg =
      _SyncV3HealthDataOneNoticeCompleteCbRegPtr.asFunction<
          int Function(
              protocol_sync_v3_health_client_one_notice_complete_cb_handle)>();

  /// @brief:同步v3健康数据的自定义一项
  /// @param data_type 数据同步类型
  /// 1 同步血氧
  /// 2 同步压力
  /// 3 同步心率(v3)
  /// 4 同步多运动数据(v3)
  /// 5 同步GPS数据(v3)
  /// 6 同步游泳数据
  /// 7 同步眼动睡眠数据
  /// 8 同步运动数据
  /// 9 同步噪音数据
  /// 10 同步温度数据
  /// 12 同步血压数据
  /// 14 同步呼吸频率数据
  /// 15 同步身体电量数据
  /// 16 同步HRV(心率变异性水平)数据
  ///
  /// @return:
  /// SUCCESS(0)成功 非0失败
  /// (ERROR_NOT_SUPPORTED(6) 不支持
  /// ERROR_INVALID_STATE(8) 非法状态
  /// )
  int SyncV3HealthDataCustomResource(
    int data_type,
  ) {
    return _SyncV3HealthDataCustomResource(
      data_type,
    );
  }

  late final _SyncV3HealthDataCustomResourcePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'SyncV3HealthDataCustomResource');
  late final _SyncV3HealthDataCustomResource =
      _SyncV3HealthDataCustomResourcePtr.asFunction<int Function(int)>();

  /// @brief:查找输入的数据同步类型支不支持
  /// @param data_type 数据同步类型
  /// 1  同步血氧
  /// 2  同步压力
  /// 3  同步心率(v3)
  /// 4  同步多运动数据(v3)
  /// 5  同步GPS数据(v3)
  /// 6  同步游泳数据
  /// 7  同步眼动睡眠数据
  /// 8  同步运动数据
  /// 9  同步噪音数据
  /// 10 同步温度数据
  /// 12 同步血压数据
  /// 14 同步呼吸频率数据
  /// 15 同步身体电量数据
  /// 16 同步HRV(心率变异性水平)数据
  ///
  /// @return:
  /// true:支持 false:不支持
  /// 方法实现前需获取功能表跟初始化c库
  int IsSupportSyncHealthDataType(
    int data_type,
  ) {
    return _IsSupportSyncHealthDataType(
      data_type,
    );
  }

  late final _IsSupportSyncHealthDataTypePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'IsSupportSyncHealthDataType');
  late final _IsSupportSyncHealthDataType =
      _IsSupportSyncHealthDataTypePtr.asFunction<int Function(int)>();

  /// ------------------------------ v2同步多运动、GPS数据进度回调注册 ------------------------------
  /// /**
  ///  * @brief 同步v2活动数据进度回调注册
  ///  * @param func 函数指针
  ///  * @return SUCCESS(0)成功
  ///  * */
  int SyncV2ActivityProgressCallbackReg(
    protocol_sync_activity_progress_cb_handle func,
  ) {
    return _SyncV2ActivityProgressCallbackReg(
      func,
    );
  }

  late final _SyncV2ActivityProgressCallbackRegPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(protocol_sync_activity_progress_cb_handle)>>(
      'SyncV2ActivityProgressCallbackReg');
  late final _SyncV2ActivityProgressCallbackReg =
      _SyncV2ActivityProgressCallbackRegPtr.asFunction<
          int Function(protocol_sync_activity_progress_cb_handle)>();

  /// @brief 同步v2活动数据完成回调注册
  /// @param func 函数指针
  /// @return SUCCESS(0)成功 ERROR_TIMEOUT(13)超时 ERROR_INVALID_STATE(8) 异常
  int SyncV2ActivityCompleteCallbackReg(
    protocol_sync_activity_complete_cb_handle func,
  ) {
    return _SyncV2ActivityCompleteCallbackReg(
      func,
    );
  }

  late final _SyncV2ActivityCompleteCallbackRegPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(protocol_sync_activity_complete_cb_handle)>>(
      'SyncV2ActivityCompleteCallbackReg');
  late final _SyncV2ActivityCompleteCallbackReg =
      _SyncV2ActivityCompleteCallbackRegPtr.asFunction<
          int Function(protocol_sync_activity_complete_cb_handle)>();

  /// @brief 同步v2Gps数据进度回调注册
  /// @param func 函数指针
  /// @return SUCCESS(0)成功
  int SyncV2GpsProgressCallbackReg(
    protocol_sync_gps_progress_cb_handle func,
  ) {
    return _SyncV2GpsProgressCallbackReg(
      func,
    );
  }

  late final _SyncV2GpsProgressCallbackRegPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(protocol_sync_gps_progress_cb_handle)>>(
      'SyncV2GpsProgressCallbackReg');
  late final _SyncV2GpsProgressCallbackReg = _SyncV2GpsProgressCallbackRegPtr
      .asFunction<int Function(protocol_sync_gps_progress_cb_handle)>();

  /// @brief 同步v2Gps数据完成回调注册
  /// @param func 函数指针
  /// @return SUCCESS(0)成功 ERROR_TIMEOUT(13)超时 ERROR_INVALID_STATE(8) 异常
  int SyncV2GpsCompleteCallbackReg(
    protocol_sync_gps_complete_cb_handle func,
  ) {
    return _SyncV2GpsCompleteCallbackReg(
      func,
    );
  }

  late final _SyncV2GpsCompleteCallbackRegPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(protocol_sync_gps_complete_cb_handle)>>(
      'SyncV2GpsCompleteCallbackReg');
  late final _SyncV2GpsCompleteCallbackReg = _SyncV2GpsCompleteCallbackRegPtr
      .asFunction<int Function(protocol_sync_gps_complete_cb_handle)>();

  /// @brief 解析完固件返回的v2同步数据二进制数据,打包成json数据回调给SDK
  /// @return SUCCESS(0),成功
  int V2SyncDataJsonDataCbReg(
    protocol_json_cb_handle func,
  ) {
    return _V2SyncDataJsonDataCbReg(
      func,
    );
  }

  late final _V2SyncDataJsonDataCbRegPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(protocol_json_cb_handle)>>(
          'V2SyncDataJsonDataCbReg');
  late final _V2SyncDataJsonDataCbReg = _V2SyncDataJsonDataCbRegPtr.asFunction<
      int Function(protocol_json_cb_handle)>();

  /// @brief 同步v2健康数据进度回调注册
  /// @param func 函数指针
  /// @return:SUCCESS(0)成功
  int SyncV2HealthProgressCallbackReg(
    protocol_sync_health_progress_cb_handle func,
  ) {
    return _SyncV2HealthProgressCallbackReg(
      func,
    );
  }

  late final _SyncV2HealthProgressCallbackRegPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(protocol_sync_health_progress_cb_handle)>>(
      'SyncV2HealthProgressCallbackReg');
  late final _SyncV2HealthProgressCallbackReg =
      _SyncV2HealthProgressCallbackRegPtr.asFunction<
          int Function(protocol_sync_health_progress_cb_handle)>();

  /// @brief 同步v2健康数据完成回调注册
  /// @param func 函数指针
  /// @return:SUCCESS(0)成功
  int SyncV2HealthCompleteCallbackReg(
    protocol_sync_health_complete_cb_handle func,
  ) {
    return _SyncV2HealthCompleteCallbackReg(
      func,
    );
  }

  late final _SyncV2HealthCompleteCallbackRegPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(protocol_sync_health_complete_cb_handle)>>(
      'SyncV2HealthCompleteCallbackReg');
  late final _SyncV2HealthCompleteCallbackReg =
      _SyncV2HealthCompleteCallbackRegPtr.asFunction<
          int Function(protocol_sync_health_complete_cb_handle)>();
}

/// 回调处理函数,响应原始数据给app //老的重启日志需要原始数据
typedef protocol_data_response_handle = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Int> data, ffi.Int length)>>;

/// 回调处理函数,解析app下发的json后组合二进制上报给app
/// @paran data二进制数据 length数据长度 type 0:BLE数据 1:SPP数据
typedef protocol_data_send_handle = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Int> data, ffi.Int length, ffi.Int type)>>;

/// 回调处理函数,app上报传输语音文件状态
/// status：
/// VOICE_TO_BLE_STATE_IDLE         = 0, //空闲态
/// VOICE_TO_BLE_STATE_START        = 1, //开始
/// VOICE_TO_BLE_STATE_END          = 2, //停止状态 正常的停止的
/// VOICE_TO_BLE_STATE_TIME_OUT     = 3, //超时
/// VOICE_TO_BLE_STATE_DISCONNECT   = 4, //断线
typedef protocol_report_voice_file_tran_status_cb_handle
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int status)>>;

/// 回调处理函数,app执行传输的固件回复结果回调
/// evt事件：VBUS_EVT_VOICE_TRAN_TO_BLE_START(7633)、VBUS_EVT_VOICE_TRAN_TO_BLE_ABNORMAL_END(7636)、VBUS_EVT_VOICE_TRAN_TO_BLE_END(7635)
/// 备注：使用voiceFileTranToBleSetParam方法 固件返回结果事件号对应VBUS_EVT_VOICE_TRAN_TO_BLE_START
/// 使用voiceFileTranToBleStop方法 固件返回结果事件号对应VBUS_EVT_VOICE_TRAN_TO_BLE_END
/// VBUS_EVT_VOICE_TRAN_TO_BLE_ABNORMAL_END事件对应的是传输过程中,固件回应包携带的错误码上报
typedef protocol_report_voice_file_tran_send_operate_reply_cb_handle
    = ffi.Pointer<
        ffi.NativeFunction<ffi.Void Function(ffi.Int evt, ffi.Int error_code)>>;

/// 回调处理函数,ble上报传输语音文件状态
/// status：
/// VOICE_STATE_IDLE             = 0, //空闲态
/// VOICE_STATE_START            = 1, //开始
/// VOICE_STATE_END              = 2, //停止状态 正常的停止的
/// VOICE_STATE_TIME_OUT         = 3, //超时
/// VOICE_STATE_DISCONNECT       = 4, //断线
/// VOICE_STATE_LOG              = 5, //登录状态
/// VOICE_STATE_APP_START        = 6, //开始
/// VOICE_APP_START_FAILED       = 7, //app发起开始失败
/// VOICE_STATE_APP_END          = 8, //停止状态
/// VOICE_APP_STOP_FAILED        = 9, //app发起结束失败
/// VOICE_APP_END_RETURN_BACK    = 10,//ALEXA 按钮退出到主界面
/// VOICE_BLE_CHANGE_ALEXA_ALARM = 11,//固件修改alexa设置的闹钟，需要重新获取alexa的闹钟数据
typedef protocol_report_opus_voice_file_tran_status_cb_handle
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int status)>>;

/// 回调处理函数,ble上报传输语音文件丢包率
/// size_lost_package:丢包数 size_all_package:总包数
typedef protocol_report_opus_voice_file_tran_lost_data_cb_handle = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Int size_lost_package, ffi.Int size_all_package)>>;

/// 回调处理函数,opus数据上报
/// data:pcm编码数据 data_len:数据大小
typedef protocol_report_opus_voice_file_tran_data_cb_handle = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Char> data, ffi.Int data_len)>>;

/// 回调处理函数,上报进度
typedef protocol_report_progress_cb_handle
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int progress)>>;

/// 回调处理函数,上报完成
typedef protocol_report_complete_cb_handle
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int error_vale)>>;

/// 回调处理函数,音频采样率转换完成回调
/// @param error_code 0:成功  1:失败,采样率已经是44.1kHZ不需要转换  2:失败,pcm转换失败  3:失败,读取文件失败
typedef mp3tomp3_complete_cb_handle
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int error_code)>>;

/// 回调处理函数,获取flash日志完成回调
/// @param error_code 0:成功,8:断线异常,13:超时异常
typedef protocol_flash_log_tran_complete_cb_handle
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int error_code)>>;

/// 回调处理函数,获取电池日志信息完成回调
typedef protocol_get_battery_log_info_complete_cb_handle = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Char> json_str, ffi.Int error_code)>>;

/// 回调处理函数,获取过热日志信息完成回调
typedef protocol_get_heat_log_info_complete_cb_handle = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Char> json_str, ffi.Int error_code)>>;

/// 回调处理函数,解析固件回复结果打包成json上报app
typedef protocol_json_cb_handle = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Char> json_str, ffi.Int type, ffi.Int error_code)>>;

/// 回调处理函数,c库通知app事件
typedef protocol_notice_cb_handle = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Int evt_base, ffi.Int evt_type, ffi.Int error, ffi.Int val)>>;

/// 回调处理函数,传输文件完成回调
typedef data_tran_complete_cb_handle = ffi.Pointer<
    ffi.NativeFunction<ffi.Void Function(ffi.Int error, ffi.Int error_vale)>>;

/// 回调处理函数,传输文件进度回调
typedef data_tran_progress_cb_handle
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int rate)>>;

/// 回调处理函数,上报json
typedef protocol_report_json_cb_handle = ffi.Pointer<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char> json_str)>>;

/// 回调处理函数,v3血压校准完成通知回调
typedef protocol_bp_cal_complete_cb_handle
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int error_code)>>;

/// 回调处理函数,同步v3健康数据进度回调
typedef protocol_sync_v3_health_client_progress_cb_handle
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int progress)>>;

/// 回调处理函数,同步v3健康数据完成回调
typedef protocol_sync_v3_health_client_complete_cb_handle
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int error_code)>>;

/// 回调处理函数,同步v3健康数据项完成回调
typedef protocol_sync_v3_health_client_one_notice_complete_cb_handle
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int type)>>;

/// 回调处理函数,同步v2活动数据进度回调
typedef protocol_sync_activity_progress_cb_handle
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int progress)>>;

/// 回调处理函数,同步v2活动数据完成回调
typedef protocol_sync_activity_complete_cb_handle
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int error_code)>>;

/// 回调处理函数,同步v2GPS数据进度回调
typedef protocol_sync_gps_progress_cb_handle
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int progress)>>;

/// 回调处理函数,同步v2GPS数据完成回调
typedef protocol_sync_gps_complete_cb_handle
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int error_code)>>;

/// 回调处理函数,同步v2健康数据进度回调
typedef protocol_sync_health_progress_cb_handle
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int progress)>>;

/// 回调处理函数,同步v2健康数据完成回调
typedef protocol_sync_health_complete_cb_handle
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int error_code)>>;
